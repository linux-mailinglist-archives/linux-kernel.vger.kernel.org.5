Return-Path: <linux-kernel+bounces-30232-lists+linux-kernel=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from sv.mirrors.kernel.org (sv.mirrors.kernel.org [139.178.88.99])
	by mail.lfdr.de (Postfix) with ESMTPS id DC8D4831BE1
	for <lists+linux-kernel@lfdr.de>; Thu, 18 Jan 2024 15:57:31 +0100 (CET)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by sv.mirrors.kernel.org (Postfix) with ESMTPS id 7213F2894C8
	for <lists+linux-kernel@lfdr.de>; Thu, 18 Jan 2024 14:57:30 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id AC94D1E4A1;
	Thu, 18 Jan 2024 14:57:23 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=kittens.ph header.i=copypaste@kittens.ph header.b="arE+0LW2"
Received: from sender4-op-o10.zoho.com (sender4-op-o10.zoho.com [136.143.188.10])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 05275375
	for <linux-kernel@vger.kernel.org>; Thu, 18 Jan 2024 14:57:17 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=pass smtp.client-ip=136.143.188.10
ARC-Seal:i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1705589840; cv=pass; b=QZhJ9fBwWLujDEEoRX867gr4D2U52eux9iiiIh3IklGvBuUqVtRSRkdYTnXmHfRclDntWryIaJpvaJwC3+BSiWeDCc8qx/58PZQmYqvXH4UFmYEUjFF3TFgJDOoFTEiHgZ0Wy2yrnuhW/DbSiKUfFBeqoLHLl8oS0sdXJy7tJS0=
ARC-Message-Signature:i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1705589840; c=relaxed/simple;
	bh=P03Ijh6SCFxy3kKdlusEfjkOqDgh/l5At6T1dUNwXh8=;
	h=ARC-Message-Signature:ARC-Authentication-Results:DKIM-Signature:
	 Received:Message-ID:Date:MIME-Version:User-Agent:From:
	 Content-Language:Subject:Autocrypt:To:Content-Type:
	 X-Zoho-Virus-Status:X-Zoho-AV-Stamp:X-ZohoMailClient; b=jXR98z/VS5xj1LcFCoiXV7VLT3tryOjSiqWZpljAiWQxibfbl/WdoXfR9DlqiYh2Xeco/VeqF2Ay+AlopTB5L9PueJEF40vQvIkTP5MoXyYPmv1e/nHvCnmwMcIZnKWCgb2CrNk9eyaYDECY5vTmBwr0q7zwvimPNEcMeUYMDSA=
ARC-Authentication-Results:i=2; smtp.subspace.kernel.org; dmarc=none (p=none dis=none) header.from=kittens.ph; spf=pass smtp.mailfrom=kittens.ph; dkim=pass (1024-bit key) header.d=kittens.ph header.i=copypaste@kittens.ph header.b=arE+0LW2; arc=pass smtp.client-ip=136.143.188.10
Authentication-Results: smtp.subspace.kernel.org; dmarc=none (p=none dis=none) header.from=kittens.ph
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=kittens.ph
ARC-Seal: i=1; a=rsa-sha256; t=1705589836; cv=none; 
	d=zohomail.com; s=zohoarc; 
	b=Ji5ZcX23Cjb3vnaeB5c34EQfTGEYGZq0ZgLIOBNbe8QQMzk38EiXP1XNcgcAQ5pm54bwJYsow1GSjMPb2ljf+1oV/Uwpl3hn5pjm6muNSKYoxVW4jHe2qfgk6TcMRG2WO65n2+qay4mOQy7ybzTEJYd6NlQEq6ybfwOIdb2bw58=
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=zohomail.com; s=zohoarc; 
	t=1705589836; h=Content-Type:Date:Date:From:From:MIME-Version:Message-ID:Subject:Subject:To:To:Message-Id:Reply-To:Cc; 
	bh=P03Ijh6SCFxy3kKdlusEfjkOqDgh/l5At6T1dUNwXh8=; 
	b=dAVEqKsPphyJVLeyVkFDCiBpAkawYOOJz7W7/AIwFd1c+oUUgAi/X0rXRypg0EEYaQhhAFSqV+76gPYZszdAd+x2ABK+6JFjhxW3HXQ/DLVdIlMOa5ZpJUc9E7GtppuFlumpXX6RW0bCwAMEFNiFzO23yI7ld+pQSFhGH/yL2U8=
ARC-Authentication-Results: i=1; mx.zohomail.com;
	dkim=pass  header.i=kittens.ph;
	spf=pass  smtp.mailfrom=copypaste@kittens.ph;
	dmarc=pass header.from=<copypaste@kittens.ph>
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; t=1705589836;
	s=zoho; d=kittens.ph; i=copypaste@kittens.ph;
	h=Message-ID:Date:Date:MIME-Version:From:From:Subject:Subject:To:To:Content-Type:Message-Id:Reply-To:Cc;
	bh=P03Ijh6SCFxy3kKdlusEfjkOqDgh/l5At6T1dUNwXh8=;
	b=arE+0LW2tMHN3s70bcvPkVlJKVm01ZNcEFq6lDGCT6czDmHsparKTIoy6huzQy5e
	qN6u4ZrmI5z/KqMmQbqmWDmkr5UEIaJmJ6h6l/5Y05WIKA8oOJQ6e9FFzJHqCSAUzyy
	J9AqpP1SAzaBuGA8Ifj8bLeXpaqBKrkibw+NVMPQ=
Received: from [10.1.10.2] (debu.tanuki.agency [71.27.48.14]) by mx.zohomail.com
	with SMTPS id 1705589833842148.8588712378014; Thu, 18 Jan 2024 06:57:13 -0800 (PST)
Message-ID: <b98b29cf-27d9-49e0-b10b-1848399badfd@kittens.ph>
Date: Thu, 18 Jan 2024 09:57:12 -0500
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
User-Agent: Mozilla Thunderbird
From: "Fredrick R. Brennan" <copypaste@kittens.ph>
Content-Language: es-CO
Subject: Hans Reiser on ReiserFS deprecation
Autocrypt: addr=copypaste@kittens.ph; keydata=
 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
 A8qgwLsbeh8=
To: LKML <linux-kernel@vger.kernel.org>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------WVgnedWdnUlXXYfJNhYoSWbN"
X-Zoho-Virus-Status: 1
X-Zoho-AV-Stamp: zmail-av-1.1.0/204.902.92
X-ZohoMailClient: External

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------WVgnedWdnUlXXYfJNhYoSWbN
Content-Type: multipart/mixed; boundary="------------cOWOM18SQFLmZFMdxt2CzozQ";
 protected-headers="v1"
From: "Fredrick R. Brennan" <copypaste@kittens.ph>
To: LKML <linux-kernel@vger.kernel.org>
Message-ID: <b98b29cf-27d9-49e0-b10b-1848399badfd@kittens.ph>
Subject: Hans Reiser on ReiserFS deprecation

--------------cOWOM18SQFLmZFMdxt2CzozQ
Content-Type: multipart/mixed; boundary="------------SY2lRypFS08okjdEfDsORiKr"

--------------SY2lRypFS08okjdEfDsORiKr
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

R3JlZXRpbmdzIExLTUwuDQoNCldoYXQgZm9sbG93cyBpcyBhIGxldHRlciBmcm9tIEhhbnMg
UmVpc2VyIHRvIG15c2VsZiwgd2hpY2ggaGUgd3JvdGUgc29tZSANCnR3byBtb250aHMgYmFj
aywgYW5kIGhhcyBhc2tlZCBtZSB0byBwdWJsaXNoLCB3aXRoIGhpcyB0aG91Z2h0cyBvbiB0
aGUgDQpkZXByZWNhdGlvbiBvZiBSZWlzZXJGUyBmcm9tIHRoZSBMaW51eCBrZXJuZWwuIEkg
aGF2ZSB0cmFuc2NyaWJlZCBpdCB0byANCnRoZSBiZXN0IG9mIG15IGFiaWxpdHkuIFBsYWlu
dGV4dCBlbWFpbCBtYXkgbm90IGJlIHRoZSBiZXN0IHdheSB0byByZWFkIA0KaXQsIGFzIHN1
Y2gsIEkgaGF2ZSBhbHNvIG1hZGUgYXZhaWxhYmxlIFBERiBhbmQgSFRNTCB2ZXJzaW9ucyBv
ZiB0aGUgbGV0dGVyLg0KDQpUaGVzZSBtYXkgYmUgZm91bmQgYXQgPGh0dHBzOi8vZnRwLm1m
ZWsub3JnL1JlaXNlci9MZXR0ZXJzPi4gTXkgbGV0dGVyIA0KdG8gSGFucyBpcyDihJYxLCBI
YW5z4oCZIHJlcGx5IGlzIOKEljIuDQoNCi0tLQ0KDQrCpyAxDQpDb3ZlciBsZXR0ZXINClRv
Og0KRnJlZHJpY2sgUiwgQnJlbm5hbg0KNTk3IE5vcnRoIFJhbGVpZ2ggQXZlbnVlDQpBdGxh
bnRpYyBDaXR5LCBOZXcgSmVyc2V5IDA4NDAxLTEwODENCg0KRGVhciBNci4gRnJlZGVyaWNr
IFtzaWNdIFIuIEJyZW5uYW4sDQoNCkkgdGhhbmsgeW91IHNvIG11Y2ggZm9yIHdyaXRpbmcg
bWUuIEkgYXBvbG9naXplIGZvciB0aGUgZGVsYXksIGFuZCBmb3IgDQppdCBiZWluZyBzbyBs
b25nLg0KDQpUaGUgbGVuZ3RoIGlzIHRoZSByZWFzb24gZm9yIHRoZSBkZWxheSBpbiBteSBy
ZXNwb25zZS4gSSBob3BlIHRoYXQgT0NSIA0KdGVjaG5vbG9naWVzIGFyZSBlZmZlY3RpdmUg
YXQgc2F2aW5nIHlvdSBmcm9tIGhhdmluZyB0byB0eXBlIHRoaXMgaW4uIA0KQ291bGQgeW91
IGNhcmVmdWxseSBwcm9vZiB0aGUgT0NSIHJlc3VsdHM/IEkgYXBvbG9naXplIGZvciB0aGUg
YnVyZGVuIGl0IA0Kd2lsbCBiZS4gSSBob3BlIHlvdSB1bmRlcnN0YW5kIHRoZSBsZW5ndGgg
YXMgbXkgdGFraW5nIHlvdXIgcmVxdWVzdCANCnNlcmlvdXNseSwgYW5kIGFyZSBwbGVhc2Vk
IHJhdGhlciB0aGFuIGRpc21heWVkLiBJdCB3YXMgYWxvdCBvZiB3b3JrIHRvIA0Kd3JpdGUg
aXQuIElmIHlvdSBzaWduIHVwIGZvciB0ZXh0IG1lc3NhZ2luZyBhdCBnZXR0aW5nb3V0LmNv
bSwgeW91IGNhbiANCmdldCBmYXN0ZXIgcmVzcG9uc2VzIGZyb20gbWUuIFNlbmRpbmcgYSBw
aG9uZSBudW1iZXIgd2lsbCBhbHNvIHdvcmsuDQoNClBsZWFzZSB1c2UgeW91ciBqdWRnbWVu
dCBpbiB3aGVyZSB0byBzZW5kIHRoaXPigJRhbnkgcGxhY2UgdGhhdCB3b3VsZCBiZSANCmlu
dGVyZXN0ZWQgaXMgZmluZS4NCg0KTEtNTCBhbmQgU2xhc2hkb3Qub3JnIHNlZW0gbGlrZSBy
ZWFzb25hYmxlIHBsYWNlcyB0byBzZW5kIGl0IChhcyBvZiANCjIwMDYpLiBZb3VyIGFkdmlj
ZSBpcyBkZXNpcmVkLg0KDQpQbGVhc2UgbGV0IG1lIGtub3cgaWYgeW91IG9yIGFueW9uZSBl
bHNlIGhhcyBxdWVzdGlvbnMuIElmIGFmdGVyIHNlbmRpbmcgDQp0aGlzIHNvbWV3aGVyZSB5
b3Ugc3RpbGwgaGF2ZSB0aW1lLCBjb3VsZCB5b3Ugc2VuZCBtZSBpbmZvIG9uIFJlaXNlcjUs
IA0Kb3IgYW55IGludGVyZXN0aW5nIHBhcGVycyBvbiBvdGhlciBGaWxlc3lzdGVtcywgY29t
cHJlc3Npb24gKGVzcGVjaWFsbHkgDQpEZWVwIExlYXJuaW5nIGJhc2VkIGNvbXByZXNzaW9u
KSwgZXRjLjENCg0KR3JhdGVmdWxseSwNCkhhbnMgUmVpc2VyDQoxMS8yNi8yMw0KRnJvbTog
SGFucyBSZWlzZXINCihhcmNoaXRlY3Qgb2YgUmVpc2VyRlMgVjMgKyBSZWlzZXI0KQ0KDQoy
NiBOb3ZlbWJlciAyMDIzDQrCpyAyDQpJbnRyb2R1Y3Rpb24NCkl3YXMgYXNrZWQgYnkgYSBr
aW5kIEZyZWRyaWNrIEJyZW5uYW4gZm9yIG15IGNvbW1lbnRzIHRoYXQgSSBtaWdodCBvZmZl
ciANCm9uIHRoZSBkaXNjdXNzaW9uIG9mIHJlbW92aW5nIFJlaXNlckZTIFYzIGZyb20gdGhl
IGtlcm5lbC4gSSBkb27igJl0IHBvc3QgDQpkaXJlY3RseSBiZWNhdXNlIEkgYW0gaW4gcHJp
c29uIGZvciBraWxsaW5nIG15IHdpZmUgTmluYSBpbiAyMDA2Lg0KDQpJIGFtIHZlcnkgc29y
cnkgZm9yIG15IGNyaW1l4oCTYSBwcm9wZXIgYXBvbG9neSB3b3VsZCBiZSBvZmYgdG9waWMg
Zm9yIA0KdGhpcyBmb3J1bSwgYnV0IGF2YWlsYWJsZSB0byBhbnkgd2hvIGFzay4NCg0KQSBk
ZXRhaWxlZCBhcG9sb2d5IGZvciBob3cgSSBpbnRlcmFjdGVkIHdpdGggdGhlIExpbnV4IGtl
cm5lbCBjb21tdW5pdHksIA0KYW5kIHNvbWUgaGlzdG9yeSBvZiBWMyBhbmQgVjQsIGFyZSBp
bmNsdWRlZCwgYWxvbmcgd2l0aCBkZXNjcmlwdGlvbnMgb2YgDQp3aGF0IHRoZSB0ZWNobmlj
YWwgaXNzdWVzIHdlcmUuIEkgaGF2ZSBiZWVuIGF0dGVuZGluZyBwcmlzb24gd29ya3Nob3Bz
LCANCmFuZCB3b3JraW5nIGhhcmQgb24gaW1wcm92aW5nIG15IHNvY2lhbCBza2lsbHMgdG8g
YWlkIG15IGJlY29taW5nIGxlc3MgDQpvZiBhIGRhbmdlciB0byBzb2NpZXR5LiBUaGUgbWFu
IEkgYW0gbm93IHdvdWxkIGRvIHRoaW5ncyB2ZXJ5IA0KZGlmZmVyZW50bHkgZnJvbSBob3cg
SSBkaWQgdGhpbmdzIHRoZW4uDQoNClBlcmhhcHMgc29tZSBtaWdodCBhY2NlcHQgbXkgYXBv
bG9neTsgb3RoZXJzIG1pZ2h0IGxlYXJuIGZyb20gbXkgDQptaXN0YWtlcyBpZiBJIGRlc2Ny
aWJlIHRoZW0gd2VsbDsgc29tZSBtaWdodCBmaW5kIHRoZSBkZXNpZ24gaXNzdWVzIA0KaW50
ZXJlc3RpbmcuDQoNCkkgd2lsbCBsZWF2ZSBpdCB0byB0aGUgdXNlcnMgdG8gZGVjaWRlIHdo
ZXRoZXIgUmVpc2VyRlMgVjMgaXMgc3RpbGwgDQp1c2VmdWwuIFVzZXJzIHNob3VsZCB1bmRl
cnN0YW5kIHRoYXQgaXQgaXMgYSBidXJkZW4gZm9yIHRob3NlIHdobyANCm1haW50YWluIFZG
UyBhbmQgdGhlIGxpa2UgdG8gaGF2ZSB0byB0ZXN0IHRoZWlyIGNoYW5nZXMgb24gYW4gYWRk
aXRpb25hbCANCmZpbGVzeXN0ZW0sIGVzcGVjaWFsbHkgZ2l2ZW4gTGludXggZmlsZXN5c3Rl
bXMgYXJlIGhhcmQgY29kZSBhdCB0aGUgVkZTIA0KbGF5ZXIuDQoNClJlaXNlckZTIDQgcHJv
dmlkZXMgYSBtb3JlIG1haW50YWluYWJsZSBiYXNpcyBmb3IgdGhlIGZ1dHVyZSBmb3IgdGhv
c2UgDQp1c2VycyB3aG8gbGlrZSB0aGUgZmVhdHVyZXMgb2YgVjMuIElmIFYzIGlzbuKAmXQg
dXNlZCBpdCBzaG91bGQgZ28sIEkgDQp0cnVzdCB0aGUgdXNlcnMgYW5kIHRoZSBrZXJuZWwg
bWFpbnRhaW5lcnMgdG8gZGlzY3VzcyB3aGV0aGVyIGl0IGlzIA0KdXNlZCwgYW5kIHRvIG1h
a2UgdGhlIHJpZ2h0IGRlY2lzaW9uIHRvZ2V0aGVyLg0KDQrCpyAzDQpNYWluIHRleHQNClYz
IGhhZCBhIG1vbWVudCBpbiB0aW1lIHdoZW4gaXQgd2FzIHVzZWZ1bCwgYW5kIEkgYW0gaGFw
cHkgdGhhdCB3ZSB3ZXJlIA0KYWJsZSB0byBjb250cmlidXRlIHRvIHRoZSBzdWNjZXNzIG9m
IEdOVS9MaW51eCBmb3IgYSBmZXcgY3J1Y2lhbCB5ZWFycyANCmR1cmluZyB3aGljaCBpdCB3
YXMgZ3Jvd2luZyByYXBpZGx5IGluIHVzYWdlLiBDaHJpc1twYWdlIDIgZm9sbG93c10gDQpN
YXNvbuKAmXMgY29udHJpYnV0aW9uIG9mIGpvdXJuYWxpbmcgd2FzIHRoZSBtb3N0IHByYWN0
aWNhbGx5IHVzZWZ1bCANCmZlYXR1cmUgb2YgVjMsIGFuZCBJIHRoYW5rIGhpbSBmb3IgaXQu
DQoNCkkgYW0gc2FkIHRoYXQgU1VTRSBkaWRu4oCZdCBtYWtlIGl0IGluIHRoZSBtYXJrZXQg
cGxhY2UsIEkgZm91bmQgaXQgdG8gYmUgDQphIHdlbGwtY3JhZnRlZCBkaXN0cm8sIGFuZCBp
dCB3YXMgYSBwcml2aWxlZ2UgdG8gYmUgYWJsZSB0byBjb250cmlidXRlIA0KdG8gaXQuIEkg
YW0gZ3JhdGVmdWwgZm9yIHRoZWlyIHNwb25zb3JzaGlwIGFuZCBzdXBwb3J0Lg0KDQpSZWlz
ZXIgRlMgVjMgd2FzIG91ciBmaXJzdCBmaWxlc3lzdGVtLCBhbmQgaW4gZG9pbmcgaXQgd2Ug
bWFkZSBtaXN0YWtlcywgDQpiZWNhdXNlIHdlIGRpZG7igJl0IGtub3cgd2hhdCB3ZSB3ZXJl
IGRvaW5nLiBJIGhhdmUgdG8gdGVsbCB5b3UgdGhhdCB3aGVuIA0KSSBkaWQgdGhlIGZpcnN0
IGJlbmNobWFya3MgdGhlIHBlcmZvcm1hbmNlIHdhcyB0ZXJyaWJsZSwgYW5kIEkgZGlkbuKA
mXQgDQprbm93IHdoeS4gQnkgdGVycmlibGUgSSBtZWFuIHRoYXQgbm8gc2FuZSBwZXJzb24g
d291bGQgdXNlIGl0IGZvciANCmFueXRoaW5nLCB0aGVyZSB3ZXJlIHllYXJzIG9mIGRhcmsg
ZGVwcmVzc2lvbiBiZWZvcmUgaXQgd2FzIGRlYnVnZ2VkIA0KZW5vdWdoIHRvIHJ1biBhdCBh
bGwsIGFuZCB0aGVuLCA1JSBoZXJlIGFuZCA1JSB0aGVyZSwgSSBkcmFnZ2VkIGl0IGludG8g
DQpiZWluZyBhIGxpdHRsZSBmYXN0ZXIgdGhhbiB0aGUgY29tcGV0aXRpb24sIGFuZCBzYXZp
bmcgc29tZSBzcGFjZSBmb3IgDQp0cmFkaXRpb25hbCBmaWxlc3lzdGVtIHNpemVzLCBhbmQg
bW9yZSBzcGFjZSBmb3Igc21hbGwgZmlsZXMuIENoYW5naW5nIA0KdGhlIGFsbG9jYXRpb24g
b2YgYmxvY2tzIHRvIGZpbGVz4oCUc2ltcGxlIGNvZGUgZm9ydHVuYXRlbHnigJR5aWVsZGVk
IG1vc3QgDQpvZiB0aGUgcGVyZm9ybWFuY2UgZ2FpbnMuIEluIFYzIHBlcmZvcm1hbmNlIHR3
ZWFraW5nLCBFeHQyLCB0aGUgZXhpc3RpbmcgDQpHTlUvTGludXggZmlsZXN5c3RlbSwgd2Fz
IGFjdHVhbGx5IGEgdmVyeSBoaWdoIHBlcmZvcm1hbmNlIA0KZmlsZXN5c3RlbeKAlHByb2Jh
Ymx5IHRoZSBiZXN0IGluIHRoZSB3b3JsZC4xIFRoZSBtYW4gSSB3YXMgdGhlbiBwcmVzZW50
ZWQgDQpwYXBlcnMgd2l0aCBiZW5jaG1hcmtzIHNob3dpbmcgdGhhdCBSZWlzZXJGUyB3YXMg
ZmFzdGVyIHRoYW4gZXh0Mi4gVGhlIA0KbWFuIEkgYW0gbm93IHdvdWxkIHN0YXJ0IGhpcyBw
YXBlcnMgW3BhZ2UgMyBmb2xsb3dzXSBjcmVkaXRpbmcgdGhlbSBmb3IgDQpiZWluZyBmYXN0
ZXIgdGhhbiB0aGUgZmlsZXN5c3RlbXMgb2Ygb3RoZXIgb3BlcmF0aW5nIHN5c3RlbXMsIGFu
ZCANCnRoYW5raW5nIHRoZW0gZm9yIHRoZSB5ZWFycyB3ZSB1c2VkIHRoZWlyIGZpbGVzeXN0
ZW0gdG8gd3JpdGUgb3Vycy4gTm90IA0KZG9pbmcgdGhhdCB3YXMgbXkgZmlyc3Qgc2VyaW91
cyBzb2NpYWwgbWlzdGFrZSBpbiB0aGUgTGludXggY29tbXVuaXR5LCANCmFuZCBpdCB3YXMg
Y29tcGxldGVseSB1bm5lY2Vzc2FyeS4NCg0KVmxhZGltaXIgU2F2ZWxpZXYsIHdobyBoYWQg
cGl0eSBvbiBtZSBhbmQgY2FtZSBiYWNrIGFmdGVyIGV2ZXJ5b25lIGVsc2UgDQpoYWQgcXVp
dCwgd2FzIHRoZSBtYW4gd2hvIG1hZGUgdGhlIGNvZGUgd29yayB3ZWxsIGVub3VnaCB0aGF0
IGFueW9uZSANCndvdWxkIHdhbnQgdG8gdXNlIGl0IGZvciBtb3JlIHRoYW4gYSBiZW5jaG1h
cmsuIEFmdGVyIGhlIGNhbWUgYmFjaywgSSANCmxlZnQgdGhlIGRlYnVnZ2luZyB0byBoaW0u
IEhlIGlzIG9uZSBvZiB0aGUgbW9zdCBnb29kLCBtaWxkLW1hbm5lcmVkLCANCmFuZCBoYXJk
IHdvcmtpbmcgbWVuIHRoYXQgZXhpc3RzLCBhbnlvbmUgd2hvIGhhcyBldmVyIHdvcmtlZCB3
aXRoIGhpbSANCndpbGwgYWdyZWUgd2l0aCB0aGF0LiBIZSBkaWRu4oCZdCBzYXkgbXVjaCBh
Ym91dCBpdCwgYnV0IGhlIGJlbGlldmVkIGluIA0KdGhlIEZyZWUgU29mdHdhcmUgTW92ZW1l
bnQuIFRocm91Z2ggZm9yY2Ugb2Ygd2lsbCwgYW5kIGhhcmQgd29yaywgaGUgDQptYWRlIGhp
bXNlbGYgaW50byBhIHByb2dyYW1tZXIgb2YgZXh0cmFvcmRpbmFyeSBza2lsbCwgdGhlIGVm
ZmVjdHMgb2YgDQp3aGljaCB5b3UgY2FuIHNlZSBtYW5pZmVzdGVkIGluIG91ciBSZWlzZXI0
IGNvZGUuIEhlIHdlbnQgZnJvbSBiZWluZyB0aGUgDQptdXN0IGp1bmlvciBvZiB0aGUgcHJv
Z3JhbW1lcnMgYXQgdGhlIHN0YXJ0IG9mIFYzIHRvIGJlaW5nIHRoZSBsZWFkIA0KcHJvZ3Jh
bW1lciwgZWFybmluZyBpdCB0aHJvdWdoIGhhcmQgd29yayBhbGwgdGhlIHdheSwNCg0KQXNz
dW1pbmcgdGhhdCB0aGUgZGVjaXNpb24gaXMgdG8gcmVtb3ZlIFYzIGZyb20gdGhlIGtlcm5l
bCwgSSBoYXZlIGp1c3QgDQpvbmUgcmVxdWVzdDogdGhhdCBmb3Igb25lIGxhc3QgcmVsZWFz
ZSB0aGUgUkVBRE1FIGJlIGVkaXRlZCB0byBhZGQgDQpNaWtoYWlsIEdpbHVsYSwgS29uc3Rh
bnRpbiBTaHZhY2hrbywgYW5kIEFuYXRvbHkgUGluY2h1ayB0byB0aGUgY3JlZGl0cywgDQph
bmQgdG8gZGVsZXRlIGFueXRoaW5nIGluIHRoZXJlIEkgbWlnaHQgaGF2ZSBzYWlkIGFib3V0
IHdoeSB0aGV5IHdlcmUgDQpub3QgY3JlZGl0ZWQuIEl0IGlzIHRpbWUgdG8gbGV0IGdvLltw
YWdlIDQgZm9sbG93c10NCg0KSW4gcHJpc29uIEkgaGF2ZSBiZWVuIHdvcmtpbmcgcXVpdGUg
aGFyZCBvbiBkZXZlbG9waW5nIG15IHNvY2lhbCBza2lsbHMsIA0KZXNwZWNpYWxseSBteSBj
b25mbGljdCByZXNvbHV0aW9uIGFuZCBjb25mbGljdCBhdm9pZGFuY2Ugc2tpbGxzLiBUaGVy
ZSANCmlzIGEgbG90IG9mIGNvbmZsaWN0IGluIHByaXNvbiwgYXMgeW91IGNhbiBpbWFnaW5l
LCBhbmQgaXQgaXMgcXVpdGUgYSANCmdvb2QgcGxhY2UgdG8gbGVhcm4gdGhvc2Ugc2tpbGxz
LiBOb3RoaW5nIGxpa2UgbG90cyBvZiBwcmFjdGljZSwgYW5kIHRoZSANCmdyb3VwcyB0aGV5
IGxldCB1cyB0YWtlIGlmIHdlIHdhbnQgdG8gaGF2ZSBhIHF1aXRlIHdlbGwgZGV2ZWxvcGVk
IA0KY3VycmljdWx1bSwgUmVwZXRpdGlvbiBoZWxwcywgYXQgbGVhc3QgZm9yIG1lLiBJdCBo
YXMgY2hhbmdlZCBtZS4NCg0KSSBoYWQgYSB0ZW5kZW5jeSB0byBzZWUgcGVvcGxlIGluIGV4
dHJlbWVzLiBUaGF0IEkgYW0gd29ya2luZyBvbiBieSANCmJlaW5nIG1pbmRmdWwgb2YgaXQs
IGFuZCBieSBiZWluZyBhcm91bmQgcGVvcGxlIHdobyBpdCB3b3VsZCBiZSBlYXN5IHRvIA0K
c2VlIGluIGV4dHJlbWVzLCBNYW55IG9mIHRoZW0gaGF2ZSBiZWNvbWUgdmVyeSBnb29kIHBl
cnNvbnMgW3NpY10gc2luY2UgDQp0aGVpciBjcmltZXMuDQoNCkkgbG9vayBiYWNrLCB3aXRo
IHRoZSBhZHZhbnRhZ2Ugb2YgdGhlIHBhc3Npbmcgb2YgeWVhcnMgaGVscGluZyB0byANCmlt
cHJvdmUgbXkgdmlzaW9uLCBhbmQgSSBzZWUgdGhhdCB3aGlsZSBJIGludGVuZGVkIHRvIGJl
IGhlbHBmdWwgdG8gDQpyZXNlYXJjaGVycyBpbiBSdXNzaWEgbGl2aW5nIG9uIGxlc3MgdGhh
biBhIGh1bmRyZWQgZG9sbGFycyBhIG1vbnRoLCBJIA0KY291bGQgbm90IGJlIGFzIGhlbHBm
dWwgYXMgYSBqb2Igd29ya2luZyBpbiBBbWVyaWNhIGVhcm5pbmcgYSBXZXN0ZXJuIA0Kc2Fs
YXJ5LiBJIHB1dCBldmVyeXRoaW5nIEkgaGFkIGludG8gdGhlIHByb2plY3QsIHdvcmtpbmcg
NDArIGhvdXJzIGEgDQp3ZWVrIGF0IGEgZGF5IGpvYiwgbW9zdCBlbXBsb3llcnMgbm90IGhh
cHB5IHRoYXQgSSB3YW50ZWQgdG8gd29yayBvbmx5IA0KNDAgaG91cnMgaWYgSSBjb3VsZCwg
YW5kIHRoZW4gSSBzcGVudCAxNS0yMCBob3VycyBhIHdlZWsgYXJndWluZyBvdmVyIA0KYWxn
b3JpdGhtcywgYXJjaGl0ZWN0dXJlLCBjb2RlLCBldGMuLCBieSBlbWFpbC4gSSBsZWFybmVk
IHRvIGN1dCBvdXQgDQpldmVyeXRoaW5nIGluIG15IGxpZmUgYmVzaWRlcyB0aGVbcGFnZSA1
IGZvbGxvd3NdIHByb2plY3QgYmVjYXVzZSANCm90aGVyd2lzZSBteSBkcmVhbSBqdXN0IHdv
dWxkIG5vdCBtYWtlIGl0Lg0KDQpJIGhhZCBtb3JlIGRyZWFtIHRoYW4gZXhwZXJpZW5jZS4g
V2l0aCBNaWtoYWlsIHRoZXJlIHJ1bm5pbmcgdGhpbmdzIGluIA0KUnVzc2lhIGl0IHdlbnQg
cHJldHR5IHdlbGwgYmVjYXVzZSB3ZSBoYWQgYW4gYWJpbGl0eSB0byB1bmRlcnN0YW5kIGVh
Y2ggDQpvdGhlciwgSSBiZWxpZXZlIE1pa2hhaWwgR2lsdmxhIHdhcyB0aGUgYnJpZ2h0ZXN0
IG1pbmQgaW4gaGlzIGdlbmVyYXRpb24gDQpvZiBjb21wdXRlciBzY2llbnRpc3RzLCBhbmQg
aGlzIHRhbGVudCB3YXMgd2FzdGVkLiBGaXJzdCBpdCB3YXMgd2FzdGVkIA0KYnkgUnVzc2lh
4oCZcyBlY29ub215IG1ha2luZyBoaXMgc3VjY2VzcyBpbXBvc3NpYmxlLCBhbmQgdGhlbiBp
biBBbWVyaWNhIA0KaXQgd2FzIHdhc3RlZCBieSBtb3N0IG9mIHRoZSBkYXRhYmFzZSBmaWVs
ZCBub3QgYmVpbmcgYWJsZSB0byB1bmRlcnN0YW5kIA0KdGhhdCBoZSB3YXMgcmlnaHQgaW4g
d2FudGluZyB0byByZXdyaXRlIHRoZSBiYXNpY3Mgb2YgdGhlaXIgZmllbGQgaW4gdGhlIA0K
d2F5cyBiZSB3YW50ZWQgdG8gYmVjYXVzZSBoZSB3YXMganVzdCBzbyBtdWNoIGJyaWdodGVy
IHRoYW4gdGhleSB3ZXJlLiBJIA0KZG9u4oCZdCB0aGluayB0aGV5IGNvdWxkIGV2ZW4gdW5k
ZXJzdGFuZCB3aHkgaXQgbWF0dGVyZWQsIHdoYXQgaGUgd2FudGVkIA0KdG8gZG8uDQoNCldl
IGJvdGggYmVsaWV2ZWQgdGhhdCByZWxhdGlvbmFsIGFsZ2VicmEgd2FzIGEgc3BlY2lhbCBj
YXNlIG9mIHNvbWV0aGluZyANCm1vcmUgZ2VuZXJhbCwgc29tZXRoaW5nIHRoYXQgd2FzIG5l
ZWRlZCBmb3Ig4oCcc2VtaS1zdHJ1Y3R1cmVkIGRhdGEiLiBIZSANCmNhbGxlZCBoaXMgYXBw
cm9hY2gg4oCcc2V0LXRoZW9yZXRpYyIsIGFuZCBpbXBsZW1lbnRlZCBpdCBpbiB0aGUgZm9y
bSBvZiBhIA0KZGF0YWJhc2UuIEkgaGFkIG15IG93biBzeW50YXggdGhhdCBleHBhbmRlZCB0
aGUgZmlsZXN5c3RlbSBuYW1lc3BhY2UsIA0KaW5zdGVhZC4gV2UgY2FtZSB1cCB3aXRoIG91
ciBpZGVhcyBpbmRlcGVuZGVudGx5LCBiZWZvcmUgd2UgbWV0LltwYWdlIDYgDQpmb2xsb3dz
XQ0KDQpJIGhhZCB0aGUgaWRlYSB0aGF0IHRoZSBwbGFjZSB0byBpbXBsZW1lbnQgaXQgd2Fz
IGluIGEgZmlsZXN5c3RlbSwgYW5kIA0KdGhhdCB0aGUgbW90aXZhdGlvbiBmb3IgaW1wbGVt
ZW50aW5nIGl0IHRoZXJlIHdhcyB0byBldm9sdmUgaXQgaW50byBhIA0KbmFtZXNwYWNlIHRo
YXQgd291bGQgYWxsb3cgdW5pZnlpbmcgYWxsIG9mIHRoZSBuYW1lc3BhY2VzIG9mIHRoZSAN
Cm9wZXJhdGluZyBzeXN0ZW0gaW50byBvbmUgbmFtZXNwYWNlLiBJIHRob3VnaHQgdGhpcyB3
b3VsZCBiZSB0aGUgbW9zdCANCmltcG9ydGFudCByZWZhY3RvcmluZyBvZiBjb2RlIGV2ZXIs
IGFuZCB3b3VsZCBpbmNyZWFzZSB0aGUgZXhwcmVzc2l2ZSANCnBvd2VyIG9mIGV2ZXJ5dGhp
bmcgaW4gdGhvc2UgbmFtZXNwYWNlcy4gSSBkcmV3IGFuYWxvZ2llcyBiZXR3ZWVuIHRoZSAN
CmVmZmVjdCBvZiByb2FkcyBhbmQgd2F0ZXJ3YXlzIG9uIHRoZSBkZXZlbG9wbWVudCBvZiBj
aXZpbGl6YXRpb24gDQphY2NvcmRpbmcgdG8gQWRhbSBTbWl0aCwgYW5kIHRoZSBlZmZlY3Rz
IG9mIGZyZWUgdHJhZGUgb24gc3BlY2lhbGl6YXRpb24gDQp0aHVzIHdlYWx0aCBhY2NvcmRp
bmcgdG8gQWRhbSBTbWl0aCBhZ2FpbiwgYW5kIHRoZSBlZmZlY3RzIG9mIHVuaWZ5aW5nIA0K
dGhlIG5hbWVzcGFjZXMgb24gdGhlIGV4cHJlc3NpdmUgcG93ZXIgb2YgdGhlIG9wZXJhdGlu
ZyBzeXN0ZW0uDQoNClRoYXQgd2FzIG15IGRyZWFtLg0KDQpJIHdhcyBub3QgdGhlIG9ubHkg
b25lIHdpdGggdGhpcyBkcmVhbS4gVGhlIHRlcm0g4oCcbmFtZXNwYWNlIiBpcyBwcmV0dHkg
DQptdWNoIG9ubHkgdXNlZCBieSBwZW9wbGUgd2hvIHNoYXJlIGluIHRoYXQgZHJlYW0gZW5v
dWdoIHRvIHVzZSBhIHRlcm0gDQp0aGF0IGltcGxpZXMgYW4gZXF1aXZhbGVuY3kgYmV0d2Vl
biBkYXRhYmFzZXMsIGZpbGVzeXN0ZW1zLCBETlMsIGV0Yy4gDQpSb2IgUGlrZSBhbmQgUGxh
biA5IGFyZSBleGFtcGxlcyBvZiB3b3JrIHRvIGluY3JlYXNlIHRoZSBGaWxlc3lzdGVtIA0K
bmFtZXNwYWNlLCBNeSBwYXJ0aWN1bGFyIGZsYXZvciBvZiB0aGUgZHJlYW0gd2FzIHRoYXQg
SSBoYWQgYSBzeW50YXggDQp0aGF0IGNvdWxkIGV4cGFuZCB0aGUgZmlsZXN5c3RlbSBoaWVy
YXJjaGljYWwgbmFtZXNwYWNlIHRvIGhhbmRsZSANCuKAnHNlbWktc3RydWN0dXJlZCBkYXRh
Ii4gVGhhdCBtZWFucyBxdWVyaWVzIHRoYXQgYXJlIGNvbnN0cnVjdGVkIGZyb20gDQpwcmlt
aXRpdmVzIHRoYXQgY2FuIGJlIGNvbWJpbmVkIGludG8gdGhlIGVxdWl2YWxlbnQgb2Ygc2Vh
cmNoZSBlbmdpbmUgDQpxdWVyaWVzICh1bnN0cnVjdHVyZWQgYXNzb2NpYXRpb25zKSwgZGF0
YWJhc2UgcXVlcmllcyAodW5vcmRlcmVkIG9yZGVyZWQgDQpwYWlycyB0byBzZWFyY2ggdGFi
bGVzKSwgb3IgZmlsZXN5c3RlbXMgKGZ1bGx5W3BhZ2UgNyBmb2xsb3dzXSBvcmRlcmVkIA0K
bmFtZXMgdG8gc2VhcmNoIGhpZXJhcmNoaWVzKSwgb3IgdGhpbmdzIHRoYXQgYXJlIHJpY2hl
ciB0aGFuIGFueSBvZiANCnRob3NlIHNwZWNpYWwgY2FzZXMuIE5vdyB0aGF0IHdhcyBteSBk
cmVhbSEgU2lnaCwgSXQgcHJvYmFibHkgd29u4oCZdCANCnN1cnByaXNlIHlvdSB0aGF0IEkg
d2FzIGEgdGVlbmFnZXIgd2hlbiBJIGNhbWUgdXAgd2l0aCB0aGlzIGRyZWFtLCBhbmQgDQpp
dHMgc3ludGF4IGZvciBzZWFyY2hpbmcgc2VtaS1zdHJ1Y3R1cmVkIGRhdGEuDQoNCkkgYXBv
bG9naXplIHRvIHRoZSB1c2VycyB0aGF0IEkgbmV2ZXIgZ290IHRvIHRoYXQgZHJlYW0gYmVj
YXVzZSBvZiBteSANCmNyaW1lIGFuZCBteSBnb2luZyB0byBwcmlzb24sIGFuZCB0aGV5IG5l
dmVyIGdvdCB0byBzZWUgYW55IHNlbWFudGljIA0KZW5oYW5jZW1lbnRzIHRvIFJlaXNlciA0
Lg0KDQpUaGUgbW9zdCB0ZWNobmljYWxseSBkaWZmaWN1bHQgdGFzayB0aGF0IHdhcyBhIHBy
ZXJlcXVpc2l0ZSB0byBzb21lZGF5IA0KaW1wbGVtZW50aW5nIG15IHN5bnRheCwgYSB0YXNr
IHRoYXQgaGFkIHRvIGJlIGltcGxlbWVudGVkIGZpcnN0IHRvIGRvIA0KdGhpbmdzIHJpZ2h0
LCB3YXMgdG8gbWFrZSB0aGUgZmlsZXN5c3RlbSBlZmZpY2llbnQgZm9yIHNtYWxsIGZpbGVz
Lg0KDQpJIHdhcyB2ZXJ5IHNlbnNpdGl2ZSBmcm9tIHRoZSBzdGFydCB0byB0aGUgcG93ZXIg
b2YgbmV0IHdvcmsgZWZmZWN0cyB0byANCmRyb3duIGVmZm9ydHMgdG8gc2hpZnQgcGFyYWRp
Z21zLCB0byBpbnRyb2R1Y2UgYmV0dGVyIHdheXMgdG8gZG8gdGhpbmdzLiANCk5ldHdvcmsg
ZWZmZWN0cyB3ZXJlIGFic3RyYWN0LCBzbyBJIHVuZGVyc3Rvb2QgdGhlbSBiZXR0ZXIgdGhh
biB0aGUgDQppbXBvcnRhbmNlIG9mIGJlbGlldmluZyB0aGF0IEkgY2FuIG1ha2UgZnJpZW5k
cyBhbmQgYWxsaWVzIG9mIHBlb3BsZSB3aG8gDQpzdGFydCBvdXQgaG9zdGlsZSBiZWNhdXNl
IEkgaGFkIG5vdCBtYWRlIHRoZW0gZmVlbCBpbmNsdWRlZC4NCg0KQXdhcmVuZXNzIG9mIG5l
dHdvcmsgZWZmZWN0cyB3YXMgd2h5IEkgZGVjaWRlZCB0aGF0IHRoZSBwYXRoIHRvIHVuaWZ5
aW5nIA0KdGhlIG5hbWVzcGFjZXMgb2YgdGhlIG9wZXJhdGluZyBzeXN0ZW0gc3RhcnRlZCB3
aXRoIGVuaGFuY2luZyBmaWxlc3lzdGVtIA0Kc2VtYW50aWNzIHdoaWNoIHN0YXJ0ZWQgd2l0
aCBjcmVhdGluZyBhIHN0b3JhZ2UgbGF5ZXIgdGhhdCBjb3VsZCBlbXVsYXRlIA0KYSBmaWxl
c3lzdGVtIGZhc3RlciB0aGFuIGFueSBleGlzdGluZyBmaWxlc3lzdGVtIGJ1dCBjb3VsZCBh
bHNvIGJlW3BhZ2UgDQo4IGZvbGxvd3NdIGVmZmVjdGl2ZSBmb3Igc3RvcmluZyBzbWFsbCBv
YmplY3RzIGxpa2UgZGF0YWJhc2VzIGFyZS4gWWVzLCANCml0IHdhcyBhcnJvZ2FudCB0byBh
dHRlbXB0IHRoYXQsIGJ1dCBpdCBzZWVtZWQgbGlrZSBpdCBzaG91bGQgYmUgDQpwb3NzaWJs
ZSB0byBkbyBpdC4gSSBoYWQgbm8gaWRlYSBob3cgbG9uZyBpdCB3b3VsZCB0YWtlIHRvIGdl
dCBpdCByaWdodC4NCg0KTWlraGFpbCBhZHZpc2VkIG1lIHRvIHVzZSBiYWxhbmNlZCB0cmVl
cyBpbnN0ZWFkIG9mIGV4dGVuc2libGUgaGFzaGluZyANCih3aGF0IGRjYWNoZSB1c2VzKS4g
SSB3b3VsZCBjb21lIHRvIHVuZGVyc3RhbmQgdGhhdCBsb2NhbGl0eSBvZiANCnJlZmVyZW5j
ZSBpcyB0aGUgc2luYSBxdWEgbm9uIG9mIHBlcmZvcm1hbmNlLCBhbmQgdGhhdCBiYWxhbmNl
ZCB0cmVlcyANCmFyZSB0aGUgYmVzdCBvZiBhbGwgdG9vbHMgZm9yIGltcGxlbWVudGluZyBj
bGV2ZXIgd2F5cyBvZiBtYXhpbWl6aW5nIA0KbG9jYWxpdHkgb2YgcmVmZXJlbmNlLCBNaWto
YWlsIGhhZCB0cmllZCBleHRlbnNpYmxlIGhhc2hpbmcsIGFuZCBsZWFybmVkIA0KdGhlIGhh
cmQgd2F5IHRoYXQgdHJ5aW5nIHRvIGZpeCBpdHMgcHJvYmxlbXMgbGVhZHMgdG8gdXNpbmcg
YmFsYW5jZWQgDQp0cmVlcy4gTG9jYWxpdHkgb2YgcmVmZXJlbmNlIGRvZXNu4oCZdCBqdXN0
IGFmZmVjdCBoYXJkIGRyaXZlIHBlcmZvcm1hbmNlLCANCml0IGFmZmVjdHMgY29tcHJlc3Nl
ZCBkYXRhIHBlcmZvcm1hbmNlICh0aGF0IG1lYW5zIFNQUkFNIHBlcmZvcm1hbmNlKSwgDQph
bmQgZXZlbiBhZmZlY3RzIENQVSBjYWNoZSBwZXJmb3JtYW5jZSAoYW5kIHRodXMgRFJBTSBz
dG9yZWQgZGF0YSANCnBlcmZvcm1hbmNlKS4gSGUgdG9sZCBtZSBoZSB3YXMgc2F2aW5nIG1l
IDIgeWVhcnMgYnkgdGVsbGluZyBtZSB0byB1c2UgDQpiYWxhbmNlZCB0cmVlcywgYW5kIHRo
YXTigJlzIHRydWUsIGFuZCBJIHRoYW5rIGhpbSBmb3IgdGhhdCwNCg0KSSBuZXZlciB0b2xk
IE1pa2hhaWwgdGhhdCBPcmFjbGUgaGFkIHRyaWVkIGltcGxlbWVudGluZyBhIGZpbGVzeXN0
ZW0gDQp1c2luZyBiYWxhbmNlZCB0cmVlcywgYW5kIGl0cyBwZXJmb3JtYW5jZSB3YXMgdGVy
cmlibGUgbGVhZGluZyB0byBtb3N0IA0KaW5zaWRlcnMgaW4gdGhlIGluZHVzdHJ5IGNvbmNs
dWRpbmcgdGhhdCBiYWxhbmNlZCB0cmVlcyBwZXJmb3JtZWQgcG9vcmx5IA0KZm9yIGZpbGVz
eXN0ZW0gRmlsZSBzaXplIHBhdHRlcm5zLiBJIGRpZG7igJl0IHRlbGwgTWlraGFpbDsgSSBk
aWRu4oCZdCB0ZWxsIA0KYW55IG9mIHRoZSBwcm9ncmFtbWVyczsgSSBkaWRu4oCZdCB0ZWxs
IGFueW9uZSBpbnZvbHZlZCBpbiB0aGUgcHJvamVjdC4gSSANCmNvdWxkbuKAmXQgc2VlIHdo
eSB0aGV5IHNob3VsZCBiZSBzbG93ZXIgc28gSSBkaXNyZWdhcmRlZCBpdCwgVmxhZGltaXIg
DQp3b3VsZFtwYWdlIDnigJMxIGZvbGxvd3NdIGhhdmUgZ29vZCBjYXVzZSB0byBiZSBhbmdy
eSB3aXRoIG1lIGlmIGhlIHJlYWRzIA0KdGhpcy4NCg0KSSB0aGluayBwYXJ0IG9mIHRoZWly
IHBlcmZvcm1hbmNlIHByb2JsZW1zIHdlcmUgaG93IHRoZXkgZGlkIHRoZWlyIA0Kam91cm5h
bGluZy4gSeKAmXZlIG9ic2VydmVkIHRoYXQgbW9zdCBiYWxhbmNlZCB0cmVlIGltcGxlbWVu
dGF0aW9ucyBhcmUgDQp0b28gc3luY2hyb25vdXMsIGFuZCBtb3N0IGZpbGVzeXN0ZW1zIGFy
ZW7igJl0IHZlcnkgc3luY2hyb25vdXMgZm9yIA0KcGVyZm9ybWFuY2UgcmVhc29ucy4gZnN5
bmMoKSBpcyBsaWtlIHVzaW5nIGEgc2xlZGdlIGhhbW1lciB0byB0dXJuIGEgDQpzY3JldyB3
aXRoIHJlcGVhdGVkIHNpZGV3YXlzIGJsb3dzIG9uIHRoZSBob2FkIG9mIHRoZSBzY3Jldy4g
V2hhdCBpcyANCm5lZWRlZCB0byBoYXZlIGhpZ2ggZGF0YSBpbnRlZ3JpdHkgZ3VhcmFudGVl
cyB3aXRoIG5vIHVubmVjZXNzYXJ5IA0KcGVyZm9ybWFuY2UgbG9zc2VzIGlzIGEgbmV3IEFQ
SSB0aGF0IGFsbG93cyBpbnRlbGxpZ2VuY2UgaW4gZG9pbmcgaXQgYnkgDQphbGxvd2luZyB0
aGUgZGlmZmVyZW50IGxheWVycyB0byBzaGFyZSB0aGVpciBncmVhdGVyIGludGVsbGlnZW5j
ZSB3aXRoIA0KdGhlIG90aGVyIGxheWVycy4gV2UgbmVlZCB0byBhbGxvdyB0aGUgdXNlciB0
byBzaGFyZSB0aGVpciBpbnRlbGxpZ2VuY2UgDQp3aXRoIHRoZSBhcHBsaWNhdGlvbiwgdGhl
IGFwcGxpY2F0aW9uIHRvIHNoYXJlIGl0cyBpbnRlbGxpZ2VuY2Ugd2l0aCB0aGUgDQpmaWxl
c3lzdGVtLCB0aGUgZmlsZXN5c3RlbSBhbmQgcHJvY2VzcyBzY2hlZHVsZXIgdG8gc2hhcmUg
dGhlaXIgDQppbnRlbGxpZ2VuY2Ugd2l0aCB0aGUgSS9PIHNjaGVkdWxlciwgdGhlIEkvTyBz
Y2hlZHVsZXIgdG8gc2hhcmUgaXRzIA0KaW50ZWxsaWdlbmNlIHdpdGggdGhlIEkvTyBzY2hl
ZHVsZXIgYW5kIG90aGVyIGFzcGVjdHMgb2YgdGhlIGhhcmQgZHJpdmUsIA0KYW5kIHRoZW4g
c2hhcmUgaW50ZWxsaWdlbmNlIGJhY2sgdXAgdGhlIG90aGVyIGRpcmVjdGlvbiBvZiB0aGF0
IHN0YWNrLCANCmFuZCB0aGVuIGFsc28gdGllIGluIHRoZSBtZW1vcnkgbWFuYWdlciBpbiB0
aGVyZSB0b28uIDIgSXQgcmVxdWlyZXMgbm90IA0KanVzdCBvcmRlcmluZyBvZiBJL0/igJlz
LCBidXQgc3BlY2lmeWluZyBncm91cGluZ3Mgb2YgSS9P4oCZcyB0aGF0IHNob3VsZCANCmNv
bW1pdCBvciBub3QgY29tbWl0IGFzIGEgZ3JvdXAsIHRvIGNvbW11bmljYXRlIHRoYXQgaW50
ZWxsaWdlbmNlLCBhbmQgDQpub3QgYmUgbW9yZSBzeW5jaHJvbm91cyB0aGFuIG5lY2Vzc2Fy
eS4gT3RoZXIgZmVhdHVyZXMgcmVsYXRpbmcgdG8gDQpwcmlvcml0aWVzLCBmYWlybmVzcywg
Z3VhcmFudGVlaW5nIEkvTyByYXRlcywgZXRjLCB3b3VsZCBhbHNvIGJlIA0KZGVzaXJhYmxl
LiBJZiBtb3JlIGRldGFpbHMgYXJlIHdhbnRlZCBieSBhbnlvbmUsIGFzaywgcGxlYXNlLCBU
aGlzIGlzIGFuIA0KYXJlYSB3aGVyZSBSZWlzZXIgNCBzaG91bGQgZG8gbW9yZVtwYWdlIDkt
MiBmb2xsb3dzXSB0aGFuIHdlIGhhZCB0aW1lIHRvIGRvLg0KDQpJIHdpc2ggSSBoYWQgaGFk
IHRoZSBtb25leSB0byByZXRhaW4gSm9zaHVhIE1hY0RvbmFsZCB3aGVuIE9yYWRlIGhpcmVk
IA0KaGltIGF3YXkgZnJvbSBtZSwgYW5kIGxlYXJuIG1vcmUgZnJvbSBoaW0gYWJvdXQgbG9n
aWNhbCBqb3VybmFsaW5nIGlkZWFzIA0KaGUgaGFkIHRoZW4sIEkgaG9wZSBoZSBpcyBkb2lu
ZyB3ZWxs4oCUaGUgd2FzIHNpbXBseSBhIGJyaWxsaWFudCB5b3VuZyANCm1hbiwgSeKAmWxs
IGp1c3Qgc2F5IHRoYXQgYmxvY2sgYWxpZ25pbmcgam91cm5hbGluZyBpc27igJl0IG5lY2Vz
c2FyaWx5IA0Kb3B0aW1hbCBmb3IgYWxsIG5lZWRzIHRoYXQgdXNlcnNwYWNlIGhhcywgYW5k
IHJlZmVyIHRoZSByZWFkZXIgdG8gaGltIA0KZm9yIG1vcmUuIFdoYXQgSSBkaWRu4oCZdCBr
bm93IHdoZW4gd2Ugd2VyZSBhcmd1aW5nIG92ZXIgdGhlIFYzIGRlc2lnbiBpcyANCnRoYXQg
dGhlIEZGUyBiZW5jaCBtYXJrcyBhcmUgbWlzbGVhZGluZywgYW5kIGZhaWwgdG8gaGlnaGxp
Z2h0IHNvbWV0aGluZyANCnRoYXQgYWxzbyBodXJ0cyBkYXRhYmFzZSBwZXJmb3JtYW5jZSwg
RkZTIGlzIHRoZSBCU0QgZmlsZXN5c3RlbSwgYW5kIGl0IA0Kd2FzIHJlZ2FyZGVkIGFzIHRo
ZSBiZXN0IG9mIGl0cyBkYXkuIEl0IHVzZWQgNGsgYmxvY2tzIGV4Y2VwdCBmb3IgdGhlIA0K
dGFpbCBlbmQgb2YgZmlsZXMgZm9yIHdoaWNoIGl0IHVzZWQgMWsgYmxvY2tzLCBhbmQgaXQg
d291bGQgY29tYmluZSANCnRob3NlIDFrIGJsb2NrcyBmcm9tIGRpZmZlcmVudCBmaWxlcyBp
bnRvIHRoZSBzYW1lIDRrLCB0aGVyZWJ5IGFsbG93aW5nIA0KdGhlbSB0byBpbmNyZWFzZSBi
bG9jayBzaXplIGJ1dCBzdGlsbCBjb25zZXJ2ZSBzcGFjZS4NCg0KU291bmRzIGNsZWFybHkg
Y29ycmVjdCwgeWVzPyBBbGFzLCB0aGUgcGVyZm9ybWFuY2UgY29zdCBvZiBwdWxsaW5nIHRo
ZSANCnRhaWxzIG9mIGZpbGVzIG91dCBvZiBsaW5lIHdpdGggdGhlIHJlc3Qgb2YgdGhlIGZp
bGUgdG8gY29tYmluZSBpdCB3aXRoIA0KdGhlIHRhaWxzIG9mIG90aGVyIGZpbGVzIGlzIGEg
c2VlayBwbHVzIGEgcm90YXRpb25hbCBkZWxheSAoMjAgbXMpLCANClRoYXTigJlzIGh1Z2Vs
eSBleHBlbnNpdmUgY29tcGFyZWQgdG8gdGhlIHRhaWwgc2l6ZSBkaXZpZGVkIGJ5IHRoZSAN
CnRyYW5zZmVyIHJhdGUsIFNlZWtzIGRvbWluYXRlIGZpbGVzeXN0ZW0gcGVyZm9ybWFuY2Ug
dW5sZXNzIHRoZSBsYXlvdXQgDQppcyBwZXJmZWN0LiBZb3UgY2FuIHNlZSB0aGUgaW1wb3J0
YW5jZSBvZiBhdm9pZGluZyBhZGRpbmcgYW55IHNlZWtzIGJ5IA0KaGF2aW5nIHRoZSB0YWls
IG9mIGFbcGFnZSAxMCBmb2xsb3dzXSBmaWxlIGxvY2F0ZWQgaW5saW5lIHdpdGggdGhlIHJl
c3QgDQpvZiB0aGUgZmlsZSwNCg0KRGF0YWJhc2VzIHdpdGggdGhlaXIgIkJMT0JTIiwgUmVp
c2VyRlMgVjMsIGFuZCBGRlMgYWxsIGNvbWJpbmUgdGFpbHMgaW4gDQphIHdheSB0aGF0IGFk
ZHMgc2Vla3MgYW5kIGh1cnRzIHBlcmZvcm1hbmNlIHN1YnN0YW50aWFsbHkuIEZvciBEYXRh
YmFzZXMgDQphbmQgUmVpc2VydHMgVjMgaXTigJlzIGV2ZW4gd29yc2UgdGhvdWdoLCBiZWNh
dXNlIEJMT0JTIG1ha2UgaXQgbm90IHJlYWxseSANCmEgYmFsYW5jZWQgdHJlZSwgYW5kIHRo
ZSBhYmlsaXR5IHRvIGVmZmVjdGl2ZWx5IGNhY2hlIGFsbCB0aGUgaW50ZXJuYWwgDQpub2Rl
cyBvZiB0aGUgdHJlZSBpcyBsb3N0LiBHb29nbGUg4oCcUmVpc2VyIDQgdHdpZ3PigJ0sIGFu
ZCBob3BlZnVsbHkgdGhhdCANCndpbGwgZmluZCBhIGxvbmdlciBkaXNjdXNzaW9uIG9mIHRo
YXQgZm9yIGludGVyZXN0ZWQgcmVhZGVycywgaW5jbHVkaW5nIA0KaG93IHRvIGZpeCBpdCwN
Cg0KVGhhdCBwZXJmb3JtYW5jZSBmYWlsaW5nIGRyb3ZlIG1lIGNyYXp54oCUSSBmZWx0IHRo
ZSBkZXNpZ24gd2FzIGp1c3QgDQp3cm9uZywgYW5kIEkgcmVzb2x2ZWQgdG8gcmVkbyBldmVy
eXRoaW5nIGZyb20gc2NyYXRjaCB3aXRoIFJlaXNlciA0LCBUaGUgDQpwbHVnaW5zLCBhbmQg
dGhlIG1vZHVsYXJpdHkgb2YgdGhlIGNvZGUgdGhleSBjcmVhdGVkLCBhcmUgdGhlIG1vc3Qg
DQppbXBvcnRhbnQgZmVhdHVyZSBvZiBSZWlzZXIgNCwgSXQgaXMgZmFyIGVhc2llciB0byBh
ZGQgZmVhdHVyZXMgdG8gDQpSZWlzZXIgNCB0aGFuIHRvIGFkZCB0aGVtIHRvIG90aGVyIGZp
bGVzeXN0ZW1zLCBiZWNhdXNlIHlvdSBqdXN0IGFkZCBuZXcgDQpwbHVnaW5zLiBUaGUgaGFy
ZCBzdHVmZiBpcyBkb25lLCBhbmQgbmV3IGZlYXR1cmVzIGFyZSBhIGRvd25oaWxsIHJpZGUu
IA0KV2VsbCwgZXhjZXB0IHRoYXQgSSBhbSBpbiBwcmlzb24sIGFuZCBzbyBJIG11c3QgbGVh
dmUgYWxsIHRoYXQgdG8gb3RoZXJzLg0KDQpUaGVyZSBpcyBhIHByb2JsZW0gdGhhdCBmaWxl
c3lzdGVtcyBoYXZlLCBhbmQgdGhhdCBpcyB0aGF0IGZvcm1hdCANCmNoYW5nZXMgYXJlIHVu
d2FudGVkIGJ5IG1hbnkgZm9yIGdvb2QgcmVhc29ucywgVGhhdCBpcyB0aGUgcHJpbWFyeSAN
CnJlYXNvbiB0aGF0IGZpbGVzeXN0ZW1zIHN0YWduYXRlLCBXZWxsLCB0aGF0LCBhbmQgc3Rh
Z25hdGluZyBpcyANCmVhc3nigKZbcGFnZSAxMSBmb2xsb3dzXQ0KDQpJIGp1c3QgaGFkIHRv
IGZpeCBhbGwgdGhlc2UgZmxhd3MsIGZpeCB0aGVtIGFuZCBtYWtlIGEgZmlsZXN5c3RlbSB0
aGF0IA0Kd2FzIGRvbmUgcmlnaHQuIEl04oCZcyBoYXJkIHRvIGV4cGxhaW4gd2h5IEkgaGFk
IHRvIGRvIGl0LCBidXQgSSBqdXN0IA0KY291bGRu4oCZdCByZXN0IGFzIGxvbmcgYXMgdGhl
IGRlc2lnbiB3YXMgd3JvbmcgYW5kIEkga25ldyBpdCB3YXMgd3JvbmcuDQoNClNVU0UgZGlk
buKAmXQgd2FudCBhIGZvcm1hdCBjaGFuZ2UsIHRoZXkgd2FudGVkIGluY3JlbWVudGFsIGlt
cHJvdmVtZW50cyANCnRvIFYzLiBUaGF04oCZcyB0aGUgd2F5IGl0IGlzIGZvciBhIGxvdCBv
ZiBmaWxlc3lzdGVtIGFyY2hpdGVjdHMuIA0KSW5jcmVtZW50YWxseSBjaGFuZ2luZyB0aGlu
Z3MgdGhleSBrbm93IGFyZSBkZWVwbHkgd3JvbmcgdG8gdGhlaXIgY29yZXMsIA0KYnV0IHN0
dWNrIGluIHRoYXQgbWlzZXJ5IG9mIGRvaW5nIHNvLiBJIHNhaWQgbm8gdG8gdGhhdCwgd2hp
Y2ggSSB3b27igJl0IA0KYXBvbG9naXplIGZvciBhbmQgZG9u4oCZdCByZWdyZXQsIGJlY2F1
c2UgSSBoYXZlIGEgc291bCwgYW5kIEkgaGFkIGEgDQpkcmVhbS4gV2hhdCBJIGRvIGFwb2xv
Z2l6ZSBmb3IgaXMgaG93IHV0dGVybHkgaW5hcnRpY3VsYXRlIGFuZCANCnVuc29jaWFibGUg
SSB3YXMgaW4gZXhwbGFpbmluZyB0aGF0IHRvIFNVU0UuIFdoYXQgSSBlc3NlbnRpYWxseSBz
YWlkIHRvIA0KU1VTRSB3YXMgdGhhdCB0aGUgY29kZSB3YXMgdW5tYWludGFpbmFibGUgdGVy
cmlibGUgY29kZSB0aGF0IG5lZWRlZCB0byANCmJlIHJld3JpdHRlbiBmcm9tIHNjcmF0Y2gs
IHRydXN0IG1lLCBpdCBuZWVkZWQgdG8gYmUgZG9uZSwgd2UgZGlkbuKAmXQgDQprbm93IHdo
YXQgd2Ugd2VyZSBkb2luZyB0aGVuIGFuZCBub3cgd2UgaGF2ZSBsZWFybmVkIHdoYXQgd2Ug
c2hvdWxkIGhhdmUgDQprbm93biwgYnV0IHdlIHdpbGwgZml4IGV2ZXJ5IGJ1ZyBpbiBWMyB0
aGF0IGlzIGZvdW5kLg0KDQpJIGNvdWxkIGhhdmUgc2FpZCB0aGF0IEkgaGVhciB0aGVtLCBh
bmQgSSBoZWFyIHRoZW0gd2VsbCwgc28gd2VsbCB0aGF0IA0KUmVpc2VyIDQgaGFzIG5vZGUg
Zm9ybWF0IHBsdWdpbnMgdGhhdCBzb2x2ZSB0aGUgZm9ybWF0IGNoYW5nZSBwcm9ibGVtLiBJ
IA0KY291bGQgaGF2ZSB0b2xkIHRoZW0gb2Ygb3VyIHBsYW5zIGZvciBhIHJlcGFja2VyIGZv
ciBSZWlzZXIgNCwgc28gdGhhdCANCnBhcnRpdGlvbnMgY291bGQgYmUgc2hydW5rLCBhbmQg
bGF5b3V0IHBlcmZlY3RseSBvcHRpbWl6ZWQsIGFuZCDigKZzcGVudCBhIA0KZGF5IHZpc2l0
aW5nIHRoZW0gYW5kIG1ha2luZyBSZWlzZXIgNCBvdXIgZHJlYW0gbm90IG15IGRyZWFtLiBJ
bnN0ZWFkIA0KSVtwYWdlIDEyIGZvbGxvd3NdIGNvbW11bmljYXRlZCB0aGF0IEkgY291bGRu
4oCZdCBwdXJzdWUgbXkgZHJlYW0gd2l0aG91dCANCmEgZm9ybWF0IGNoYW5nZS4gQm90aCBT
VVNFIGFuZCBJIHdhbnRlZCB3aGF0IHdhcyBiZXN0IGZvciBMaW51eCBhbmQgDQpTVVNFLCBz
byB0aGUgcmVhc29uIGZvciBteSBmYWlsdXJlIHdhcyB0aGF0IEkgaGFkIGZhaWxlZCB0byBz
b2NpYWxseSANCmNvbm5lY3QgYnkgcmVhY2hpbmcgcGFzdCB0aGUgaW5pdGlhbCBob3N0aWxp
dHkgdG8gdGhlIGZvcm1hdCBjaGFuZ2UgdG8gSSANCm1ha2UgbXkgKGFuZCBEQVJQQeKAmXMp
IGRyZWFtIGludG8gb3VyMyBkcmVhbS4gSSB3b3VsZCByZXBlYXQgdGhpcyBmYWlsdXJlIA0K
c3R5bGUgd2l0aCB0aGUgTGludXgga2VybmVsIGNvbW11bml0eSB3aGVuIFJlaXNlciA0IHdh
cyBzdWJtaXR0ZWQgZm9yIA0KaW5jbHVzaW9uLCBvbmx5IHdvcnNlLg0KDQpMZXQgbWUgZ28g
YmFjayBpbiB0aW1lIHRob3VnaCB0byB0aGUgZWFybHkgZGF5cyBvZiBWMy4gTm90IGxvbmcg
YWZ0ZXIgDQp0aGUgY29tcHV0ZXJzIHdlcmUgcHVyY2hhc2VkLCBhbmQgdGhlbiB0aGUgcHJv
amVjdCByZWFsbHkgZ290IGdvaW5nLCANCk1pa2hhaWwgZ290IGEgam9iIGluIEFtZXJpY2Es
IE1pa2hhaWwgd2FzIHRoZSByZWFzb24gSSBoYWQgaGlyZWQgdGhpcyANCmdyb3VwLiBOb3cg
SSBubyBsb25nZXIgaGFkIHNvbWVib2R5IHJ1bm5pbmcgdGhpbmdzIG9uIHNpdGUgdGhhdCBJ
IHdhcyANCmludGVsbGVjdHVhbGx5IGNvbXBhdGlibGUgd2l0aCwgYW5kIGZyaWN0aW9ucyBk
ZXZlbG9wZWQuIEkgaGFkIG5vdCANCmNob3NlbiB0aGVtLCBhbmQgdGhleSBoYWQgbm90IGNo
b3NlbiBtZSwgbm9yIGhhZCB0aGV5IGNob3NlbiBteSBkcmVhbSBvciANCnRoZSBGcmVlIFNv
ZnR3YXJlIE1vdmVtZW50LiBBbGFzLCBJIHdhcyBpbmV4cGVyaWVuY2VkLCBhbmQgdGhleSBk
aWRu4oCZdCANCnJlc3BlY3QuIHRoYXQsIHdoaWNoIGlzIHVuZGVyc3RhbmRhYmxlLCB5ZXM/
IEkgaGFkIGEgZmVlbCBmb3IgDQphYnN0cmFjdGlvbnMgdGhhdCB3YXMgc3Ryb25nZXIgdGhh
biBteSBmZWVsIGZvciBwZW9wbGUsIGFuZCBhIGNhc3VhbCANCmRlbGlnaHQgZm9yIHRvc3Np
bmcgc29jaWFsbHkgZXN0YWJsaXNoZWQgYWxnb3JpdGhtcyB0aGF0IG1hZGUgdGhlbSBldmVu
IA0KbGVzcyBjb21mb3J0YWJsZSB0aGFuIG15IHdlYXJpbmcgYSBjb3dib3kgaGF0IGluc3Rl
YWQgb2YgYSB0aWUsIE5vbmUgb2YgDQp0aGlzIHdhcyBhIHByb2JsZW0gd2l0aCBNaWtoYWls
cyBidXQgTWlraGFpbCBoYWQgbGVmdC4NCg0KSXQgd2FzIHRvIGJlIGV4cGVjdGVkIHRoYXQg
dGhlcmUgd291bGQgYmUgcHJvYmxlbXMsIGJ1dCBJIHdhcyB0b28geW91bmcgDQphbmQgaG9w
ZWZ1bCB0byBzZWUgdGhhdC4gVGhlcmUgd2FzIGEgY29zdCB0byBnb2luZyBmcm9tIHN5c3Rl
bSANCmFkbWluaXN0cmF0b3IgdG8gYXJjaGl0ZWN0IHdpdGhvdXQgZmlyc3Qgc3BlbmRpbmcg
YSBmZXcgeWVhcnMgYXMgYSANCmNvZGVyLltwYWdlIDEzIGZvbGxvd3NdDQoNCkFuIGV4YW1w
bGUgb2YgdGhpcyB3YXMgdGhlaXIgdXNlIG9mIEJMT0JTIGluIFYzLiBJIGRpZG7igJl0IGtu
b3cgdGhhdCANCnB1dHRpbmcgdW5mb3JtYXR0ZWQgbm9kZXMgb24gYSBsZXZlbCBvZiB0aGUg
dHJlZSBiZWxvdyB0aGUgcHV0YXRpdmUgDQpsZWF2ZXMgb2YgdGhlIHRyZWUgd2FzIHRoZSBz
dGFuZGFyZCB3YXkgb2YgZG9pbmcgdGhpbmdzIGluIHRoZSBkYXRhYmFzZSANCndvcmxkLiBX
aGVuIEkgc2F3IGl0IGluIHRoZSBjb2RlIEkgb2JqZWN0ZWQgdG8gaXQuIEkgd2FzIGFza2Vk
IHRvIGp1c3QgDQpsZXQgdGhlbSB0cnkgaXQgdGhlaXIgd2F5LCBhbmQgaWYgaXQgZGlkbuKA
mXQgd29yayBpdCBjb3VsZCBiZSByZW1vdmVkICwgSSANCndhcyB0b28gaW5leHBlcmllbmNl
ZCBhcyBhIHNvZnR3YXJlIHByb2plY3QgbWFuYWdlciB0byBrbm93IHRoYXQgdGhhdCANCndh
cyBhbiBhcmd1bWVudCB0byBvbmx5IGVudGVydGFpbiBhZnRlciB0aGUgZmlyc3QgdmVyc2lv
biBvZiBhIHByb2R1Y3QgDQpoYXMgc2hpcHBlZCwgYmVjYXVzZSB3aGF0ZXZlciBnZXRzIHdy
aXR0ZW4gYmVmb3JlIHByb2R1Y3Qgc2hpcG1lbnQgaXMgDQpub3QgbGlrZWx5IHRvIGdldCBy
ZXdyaXR0ZW4gdW50aWwgYWZ0ZXIgcHJvZHVjdCBzaGlwbWVudCwgZXNwZWNpYWxseSBpZiAN
CnlvdSBrbm93IHRoZSBkZXNpZ24gaXMgd3JvbmcuIFRoYXTigJlzIGVzcGVjaWFsbHkgdHJ1
ZSBpZiB5b3Uga25vdyB0aGUgDQpkZXNpZ24gaXMgd3JvbmcuIFdoYXQgSSBkaWRu4oCZdCBr
bm93IHdhcyBqdXN0IGhvdyB3cm9uZyB0aGUgZGVzaWduIHdhcywgDQpUaGUgcGVyZm9ybWFu
Y2UgY29zdCB3YXMgaGlnaGVyIHRoYW4gSSBmZWFyZWQgaXQgd291bGQgYmUsIEkgc2hvdWxk
IGFsc28gDQpzYXkgdGhhdCB0aGUgY29kaW5nIGNvc3Qgb2YgZG9pbmcgaXQgcmlnaHQgd2Fz
IGhpZ2hlciB0aGFuIEkgdGhvdWdodCBpdCANCndvdWxkIGJlLCBUbyB0aGUgeW91bmcgYXJj
aGl0ZWN0cyBvdXQgdGhlcmUsIGxldCBtZSBzYXkgdGhhdCBpZiB5b3Uga25vdyANCnNvbWV0
aGluZyBpcyB3cm9uZywgZG9u4oCZdCBsb3QgaXQgaGFwcGVuIGp1c3QgdG8gYmUgYWdyZWVh
YmxlIG9yIHRvIA0KYWNjZXB0IHRoZSBjb25zZW5zdXMsIFllcywgbGlzdGVuIHRvIGFsbCB0
aGUgYXJndW1lbnRzLCBidXQgaWYgeW91IGRvbuKAmXQgDQpoYXZlIGEgYmV0dGVyIGZlZWwg
Zm9yIGFsZ29yaXRobXMsIHlvdSBzaG91bGQgbm90IGJlIGluIHRoZSBqb2Igb2YgDQphcmNo
aXRlY3QuIEJlbGlldmUgaW4geW91cnNlbGYsIEkgcGFpZCB0aGUgcHJpY2UgZm9yIG5vdCBr
bm93aW5nIHdoZW4gdG8gDQpiZSBmaXJtLCB3aGVuIHRoZSBiZW5jaG1hcmtzIGNhbWUgaW4s
IGFuZCB0aGVuIGFnYWluIHdoZW4gZml4aW5nIGl0IA0KcmVxdWlyZWQgYSBmb3JtYXQgY2hh
bmdlIHRoYXQgbG9zdCBtZSBTVVNFLiA0IFtwYWdlIDE0IGZvbGxvd3NdDQoNClRoZW4gTWlr
aGFpbOKAmXMgZW1wbG95ZXIgaGlyZWQgdGhlIHJlc3Qgb2YgdGhlbSwgYW5kIGxlZnQgbWUg
d2l0aCBhIHBpbGUgDQpvZiBwb29ybHkgY29tbWVudGVkIGNvZGUgdGhhdCB3YXMgbm90IGFi
bGUgdG8gcnVuLiBJdCB3b3VsZCBoYXZlIGJlZW4gDQp3aXNlciBmb3IgbWUgdG8gd3JpdGUg
aXQgYWdhaW4gZnJvbSBzY3JhdGNoLCBidXQgdGhhdCB3b3VsZCBoYXZlIG1lYW50IA0KYWRt
aXR0aW5nIHRoYXQgYWxsIEkgaGFkIGludmVzdGVkIGludG8gdGhlIHByb2plY3Qgd2FzIGEg
dG90YWwgbG9zcy41DQoNCk5vdywgd2l0aCB0aGUgZGlzdGFuY2Ugb2YgdGltZSwgSSBjYW4g
c2VlIHRoYXQgdGhlaXIgbGVhdmluZyB3YXMgc2ltcGx5IA0KdGhlIHJlYXNvbmFibGUgdGhp
bmcgZnJvbSB0aGVpciBwb2ludCBvZiB2aWV3LCBUaGVyZSB3ZXJlIHNvbWUgDQp1bmtpbmRu
ZXNzZXMgaW4gaG93IHRoZXkgbGVmdCwgYnV0IHRoYXTigJlzIHRvIGJlIGV4cGVjdGVkLCBz
YXlzIHRoZSANCmRpc3RhbmNlIG9mIHRpbWUsIFRoZW4gSSBmZWx0IHNvIGJldHJheWVkLiBO
b3cgSSB3aXNoIHRvIGxldCBnbyBvZiB0aGF0LiANClRoZXkgd2VyZSBqdXN0IG9yZGluYXJ5
IHBlb3BsZSBjYXVnaHQgaW4gZWNvbm9taWMgZm9yY2VzLCBhbmQgbm90IA0KZW5qb3lpbmcg
d29ya2luZyBmb3IgdGhlIGd1eSB3aXRoIG1vcmUgZHJlYW0gdGhhbiBleHBlcmllbmNlLiBU
aGV5IHRvbyANCndlcmUgaW5leHBlcmllbmNlZDogbm9uZSBvZiB1cyBoYWQgd29ya2VkIG9u
IGEgZmlsZXN5c3RlbSBiZWZvcmUuIFdlIA0Kd2VyZSBhbGwgeW91bmcsIGFuZCBpbXBhdGll
bnQuIEkgbmV2ZXIgZGlkIGdldCB0byB3aGVyZSB3ZSBtYWRlIGVub3VnaCANCm1vbmV5IHRo
YXQgSSBjb3VsZCBwYXkgcGVvcGxlIHdlbGwsIGFuZCBJIGFtIHRydWx5IHNvcnJ5IGZvciB0
aGF0LiBJZiBJIA0KaGFkIG5vdCBjb21taXR0ZWQgbXkgY3JpbWUsIHRoYXQgZGF5IHdoZW4g
UmVpc2VyIDQgd2FzIGEgd29ydGh5IHVzZSBvZiANCnRoZSBleHRyYW9yZGluYXJ5IHRhbGVu
dCBvZiB0aGUgcHJvZ3JhbW1lcnMgd29ya2luZyBvbiBpdCBwcm9iYWJseSB3b3VsZCANCmhh
dmUgY29tZS4gSSB3YXMgY2FsbG91cyBhbmQgaW5kaWZmZXJlbnQgdG8gdGhlaXIgbmVlZHMg
YW5kIGRyZWFtcyB3aGVuIA0KSSBjb21taXR0ZWQgbXkgY3JpbWUsIGFuZCB2aWN0aW1pemVk
IHRoZW0gZmluYW5jaWFsbHkgYW5kIHJ1aW5lZCB0aGVpciANCmRyZWFtcyB0aGF0IEkgaGFk
IHRhbGtlZCB0aGVtIGludG8uDQoNCk9uZSBvZiBteSBncmVhdCByZWdyZXRzIGlzIHRoYXQg
SSBsZXQgZ28gb2YgTWlraGFpbCBhcyBhIGZyaWVuZC4gSSBob3BlIA0KYmUgaXMgYWxpdmUs
IGFuZCBkb2luZyB3ZWxsLltwYWdlIDE1IGZvbGxvd3NdDQoNCkkgcmVhZCBhYm91dCBhIERB
UlBBIHJlcXVlc3QgZm9yIHByb3Bvc2FscyBmb3Igb3BlbiBzb3VyY2Ugc29mdHdhcmUgb24g
YSANCkZyaWRheSBvbiBTbGFzaGRvdCwgYW5kIGl0IGhhZCBhIE1vbmRheSBzdWJtaXNzaW9u
IGRlYWRsaW5lLiBJIHdlbnQgaW50byANCmEgd3JpdGluZyBGcmVuenksIGFuZCBwcm9wb3Nl
ZCB3aGF0IGJlY2FtZSBSZWlzZXIgNCwgREFSUEEgd2FzIHZlcnkgZ29vZCANCnRvIHVzLCB2
ZXJ5IGFuZCBJIGxlYXJuZWQgYSBsb3QgYWJvdXQgYWNjb3VudGluZyBhbmQgc2VjdXJpdHkg
Ym90aCBmcm9tIA0KdGhlbS4gSeKAmWQgbGlrZSB0byBhcG9sb2dpemUgdG8gREFSUEEgZm9y
IHR3byB0aGluZ3M6DQoNCkFsbCB3ZSB3ZXJlIGFibGUgdG8gY29tcGxldGUgd2FzIHRoZSBp
bmZyYXN0cnVjdHVyZSB0aGF0IHdvdWxkIGVuYWJsZSANCnRoZSBzZWN1cml0eSBmZWF0dXJl
cyBJIHByb3Bvc2VkLCBhbmQgdGhhdCB3YXMgZGVzcGl0ZSBteSBwdXR0aW5nIA0Kc2V2ZXJh
bCB0aW1lcyB0aGUgbW9uZXkgdGhleSBnYXZlIHVzIGludG8gdGhlIHByb2plY3QgZnJvbSBl
dmVyeSB3aGVyZSBJIA0KY291bGQgZ2V0IGl0LCBpbmNsdWRpbmcgdXNpbmcgMjklIGludGVy
ZXN0IGNyZWRpdCBjYXJkIGNhc2ggYWR2YW5jZXMgdG8gDQptYWtlIHBheXJvbGwgbmVhciB0
aGUgZW5kLiA2IE5vdyB0aGF0IFJlaXNlciA0IGlzIHN0YWJsZSwgdGhlIHBsdWdpbiANCmlu
ZnJhc3RydWN0dXJlIHdvdWxkIG1ha2UgaXQgc28gZWFzeSB0byBhZGQgZXh0cmEgZmVhdHVy
ZXMsIHdlIGNvdWxkIA0KcHJvYmFibHkgaGF2ZSBkb25lIHRoZSBlbmNyeXB0aW9uIHBsdWcg
aW4gYW5kIHN0YXQgZGF0YSBpbmhlcml0YW5jZSBpbiANCmp1c3QgNiBtb250aHMuNw0KQXQg
dGhlIHRpbWUgSSBtYWRlIHRoZSBSZWlzZXI0IHByb3Bvc2FsIGl0IGxvb2tlZCBsaWtlIGRl
bW9jcmFjeSBoYWQgd29uIA0KaW4gUnVzc2lhLCBJIGJlbGlldmUgd2Ugd2VyZSBhIHBvaW50
IG9mIGxpZ2h0IGluIFVT4oCTUnVzc2lhbiByZWxhdGlvbnMsIA0KVGhlIHByb2JsZW0gd2Fz
IHRoYXQgd2hhdCB3YXMgbmVlZGVkIHdhcyBhIHRob3VzYW5kIHBvaW50cyBvZiBsaWdodCwg
YW5kIA0Kd2Ugd2VyZSBvbmUgb2YgYSB2ZXJ5IGZldy5bcGFnZSAxNiBmb2xsb3dzXQ0KUnVz
c2lhbiBJbnRlbGxpZ2VuY2UvTGF3IEVuZm9yY2VtZW50LCBhZnRlciBkb2luZyBhIHZlcnkg
dGhvcm91Z2ggam9iIG9mIA0KbWFraW5nIHN1cmUgd2Ugd2VyZW7igJl0IGEgQ0lBIGNvdmVy
IG9wZXJhdGlvbiw4IHdhcyB2ZXJ5IG5pY2UgdG8gdXMsIGFuZCANCnF1aXRlIHN1cHBvcnRp
dmUgb2YgdXMgYW5kIHRoZSBGcmVlIFNvZnR3YXJlIE1vdmVtZW50LCBJdCBtaWdodCBub3Qg
aGF2ZSANCmJlZW4gYSBjb2luY2lkZW5jZSB0aGF0IHdlIGhhZCBubyBNYWZpYSBwcm9ibGVt
cywgVGhlIHRpbWUgdGhhdCBJIGdvdCANCnNjYW1tZWQgZm9yICQzMDAsIHRoZXkgZ290IG15
IG1vbmV5IGJhY2sgaW4gNDUgbWludXRlcy4gSSBrbm93IHRoYXQgb25lIA0KaXMgbm90IHN1
cHBvc2VkIHRvIHNheSBnb29kIHRoaW5ncyBhYm91dCB0aGVtLCBidXQgbXkgb3duIHBlcnNv
bmFsIA0KZXhwZXJpZW5jZSBpcyB0aGF0IHRoZXkgd2VyZSB2ZXJ5IGVmZmVjdGl2ZSwga2lu
ZCwgYW5kIGV2ZW4gd2lzZWx5IA0KZ3VpZGluZy4gSW4gaW1wb3J0YW50IHdheXMsDQoNClJ1
c3NpYW4gY3VsdHVyZSB0ZWFjaGVzIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2YgcGVvcGxl
LiBBcyBhIGZvciANCmluc3RhbmNlLCBvbmUgb2YgdGhlbSB0b2xkIG1lIHRoYXQgbXkgd2lm
ZSB3YXMgaW4gYSBsb3Qgb2YgcGFpbi4gTm93IEkgDQpjYW4gc2VlIGNsZWFybHkgdGhhdCB0
aGF0IHdhcyBleGFjdGx5IGNvcnJlY3QsIGFuZCBwZXJmZWN0bHkgaWxsdW1pbmF0ZWQgDQp0
aGUgcGF0aCBJIHNob3VsZCBoYXZlIHRha2VuLiBBbGFzLCBJIGxhY2tlZCB0aGUgd2lzZG9t
IHRvIHVuZGVyc3RhbmQgDQp0aGUgd29yZHMgd2l0aCBqdXN0IG9uZSByZXBldGl0aW9uLg0K
DQoqOQ0KDQpJbiBwcmlzb24gSSBoYXZlIGxlYXJuZWQgdGhhdCBhbGllbmF0aW9uLCB3aGlj
aCBJIGludGVuZCB0byB1c2UgdG8gDQpwcm90ZWN0IG15c2VsZiwgaXMgb2Z0ZW4gYSBjYWdl
IEkgYnVsbGQgYXJvdW5kIG15c2VsZiBpbnN0ZWFkLiBBIGZlYXIgb2YgDQpiZWluZyBuYcOv
dmUgY2FuIG9mdGVuIGJlIGFzIGRhbmdlcm91cyBpbiBpdHMgcmVhbGl0eSBkaXN0b3J0aW9u
cyBhcyANCmJlaW5nIG5hw692ZSxbcGFnZSAxNyBmb2xsb3dzXSBOb3cgaXMgbm90IHRoZSB0
aW1lIHRvIHRyeSB0byBiZSBhIGxpZ2h0IA0KaW4gVVMtUnVzc2lhbiByZWxhdGlvbnMuIEkg
aG9wZSB0aGF0IHRoZXJlIHdpbGwgYWdhaW4gYmUgc3VjaCBhIHRpbWUsIA0KYW5kIGFuIGVu
ZCB0byBhbGwgdGhlIGRlYXRoIGFuZCBkeWluZy4gSSBob3BlIHRoZSB0aW1lIHdpbGwgY29t
ZSBhZ2FpbiANCmZvciByZWFjaGluZyBwYXN0IHRoZSBhbGllbmF0aW9uLCBhbmQgZmluZGlu
ZyBmcmllbmRzaGlwW3BhZ2UgMTggDQpmb2xsb3dzXSBhbmQgbG92ZSwgYmV0d2VlbiBSdXNz
aWEgYW5kIFVrcmFpbmUgYW5kIHRoZSBVLlMsIGFuZCBiZXR3ZWVuIA0KbXkgY2hpbGRyZW4g
YW5kIEkuIENhbGwgbWUgYSBmb29sLCBvciBzaW1wbHkgc29tZW9uZSB3aG8gdGhpbmtzIHRo
ZSBwYWluIA0KaXMgdG9vIG11Y2ggZm9yIHVzIGFsbCwgSSBsZWF2ZSB0aGF0IHRvIHlvdS4N
Cg0KQmFjayB0byBSZWlzZXI0OiBXZTEwIGJ1aWx0IGEgYmVhdXRpZnVsIGZpbGVzeXN0ZW0g
dGhhdCBlbWJlZGllZCANCmV2ZXJ5dGhpbmcgd2UgaGFkIGZpZ3VyZWQgb3V0IHdlIHNob3Vs
ZCBoYXZlIGRvbmUgdGhlIGZpcnN0IHRpbWUsIGNhbGxlZCANClJlaXNlciA0LCBhbmQgaXQg
c21va2VkLCBXaGF04oCZcyBtb3JlLCBpdCBoYWQgdGhpcyBwbHVnaW4gYXJjaGl0ZWN0dXJl
IA0KdGhhdCBJIGhhZCBwcm9wb3NlZCB0byBEQVJQQSBpbiB0aGF0IHdyaXRpbmcgZnJlbnp5
LCBidXQgdGhhdCBOaWtpdGEgDQpEYW5pbG92IGhhZCBtYWRlIGV2ZW4gYmV0dGVyIHRoYW4g
d2hhdCBJIGhhZCBwcm9wb3NlZCAoaGUgbWFkZSB0aGUgDQpiYWxhbmNpbmcgb3BlcmF0aW9u
cyBwbHVnaW5zIHRvbywgYW5kIEkgYW0gc28gZ2xhZCB0aGF0IGhlIHdhcyBzbWFydGVyIA0K
dGhhbiBtZSBhbmQgc2hvd2VkIHRoYXQgdGhlIHBlcmZvcm1hbmNlIGNvc3RzIHdlcmUgYWNj
ZXB0YWJsZSkuDQoNCldpdGggbW9zdCBmaWxlc3lzdGVtcywgYWRkaW5nIGEgZmVhdHVyZSBp
cyA4MCUgYWx0ZXJpbmcgdGhlIGV4aXN0aW5nIA0KY29kZSBhbmQgMjAlIHdyaXRpbmcgdGhl
IG5ldyBmZWF0dXJlLCBhbmQgdGhlbiB5b3Ugd2lsbCBiZSBsaWtlbHkgYWRkaW5nIA0KYSBG
b3JtYXQgY2hhbmdlIHRoYXQgc29tZW9uZSBub3QgZXZlbiB3b3JraW5nIGluIHRoZSBmaWxl
c3lzdGVtIGdyb3VwIA0Kd2lsbCBzYXkgbm8gdG8uIFdpdGggUmVpc2VyIDQgd2UgbWFkZSBl
dmVyeSBhc3BlY3Qgb2YgaXQgdGhhdCB3ZSBjb3VsZCANCmltYWdpbmUgZG9pbmcgc28gZm9y
IGludG8gYSBwbHVnaW4uIElmIHlvdSB3YW50IHRvIGFkZCBhIG5ldyBmZWF0dXJlLCANCnlv
dSBqdXN0IHNwZW5kIHlvdXIgdGltZSB3cml0aW5nIHRoZSBuZXcgcGx1Z2lucyBmb3IgaXQs
IGFuZCA5MCUgb2YgdGhlIA0KdGltZSB0aGF0IGlzIGFsbCB5b3Ugd2lsbCBoYXZlIHRvIHdy
aXRlLCBvciBmYWlsaW5nIHRoYXQsIGl0IHdpbGwgYmUgODAlIA0Kb2Ygd2hhdCB5b3Ugd2ls
bCBoYXZlIHRvIHdyaXRlLCBZb3UgZ2V0IHRvIHNwYW5kIHlvdXIgdGltZSBvbiB5b3VyIA0K
Y2xldmVyIGlkZWEgaW5zdGVhZCBvZiBvbiB3aHkgaXQgd2FzIHNvIG11Y2ggaGFyZGVyIHRo
YW4gaXQgc2hvdWxkIGhhdmUgDQpiZWVuIHRvIHdyaXRlIGl0LiBJIHRoaW5rIHlvdeKAmWxs
IGZpbmQgaXQgaXMgbW9yZSB0aGFuIDMgdGltZXMgZmFzdGVyIHRvIA0KYWRkIGl0IHRvIFJl
aXNlciA0IHRoYW4gdG8gYW55W3BhZ2UgMTkgZm9sbG93c10gb3RoZXIgZmlsZXN5c3RlbSwg
d2l0aCANCmFsbCB0aGUgZmVhdHVyZXMgcmVxdWlyZWQgb2YgYSBmaWxlc3lzdGVtIGZvciBj
b21wYXRpYmlsaXR5IChhbiBlbm9ybW91cyANCmJ1cmRlbiB0byB3cml0ZeKAlGlmIHlvdSBo
YXZlIGEgY2xldmVyIGZpbGVzeXN0ZW0gaWRlYSBzYXZlIHlvdXJzZWxmIHRoYXQgDQpidXJk
ZW4gYW5kIGFkZCBhIHBsdWdpbiB0byBSZWlzZXIgNCBpbnN0ZWFk4oCUeW91IGNhbiBiZSBv
bmUgcHJvZ3JhbW1lciANCmRvaW5nIGEgNiBtb250aCBwbHVnaW4gaW5zdGVhZCBvZiBoYXZp
bmcgdG8gZnVuZCBhIHRlYW0gZm9yIDUgeWVhcnMgdG8gDQpkbyBhIGZpbGVzeXN0ZW0pIGNv
bXBsZXRlZCwgaXQgd2FzIGdvaW5nIHRvIGJlIGFsbCBkb3duaGlsbCBmcm9tIHRoZXJlLiAN
CldlIHdvdWxkIGhhdmUgYmVlbiB0aGVvbmVzIGltcGxlbWVudGluZyBhIHN1YnN0YW50aXZl
IG5ldyBmZWF0dXJlIHBlciANCnByb2dyYW1tZXIgcGVyIDYgbW9udGhzLCBUaGUgY29kZSB0
aGF0IEFsZXhhbmRlciBaYXJvY2hlbnRjZXYsIE5pa2l0YSANCkRhbmlsb3YsIGFuZCBWbGFk
aW1pciBTYXZlbGlldiB3cm90ZSAoYWxsIHRocmVlIG9mIHRoZW0gY29udHJpYnV0aW5nIA0K
ZXF1YWxseSwgd29ya2luZyB0b2dldGhlciBsaWtlIHRoZSB0aHJlZSBtdXNrZXRlZXJzKSB3
YXMgYmVhdXRpZnVsIGNvZGUsIA0KYW5kIHRoZW4gdGhlIGp1bmlvciBwcm9ncmFtbWVyIEVk
d2FyZCBTaGlzaGtpbiBjYW1lIGFsb25nIGFzIHRoZSBmb3VydGggDQptdXNrZXRlZXIgYW5k
IGhpcyBjb21wcmVzc2lvbiBwbHVnaW4gZG91YmxlZCBwZXJmb3JtYW5jZSBhZ2FpbiBmb3Ig
DQpjb21wcmVzc2libGUgZmlsZXMuIEkgY2Fubm90IHJlbWVtYmVyIGV2ZXIgZmluZGluZyBh
bnl0aGluZyBJIGNvdWxkIA0KaW1wcm92ZSBpbiBBbGV4YW5kZXIgWmFyb2NoZW50Y2V24oCZ
cyBjb2RlOiBpdCB3YXMgYWx3YXlzIHBlcmZlY3RseSANCndyaXR0ZW46IOKAnHJlYWQgaXQg
YW5kIGxlYXJuIGhvdyB0aGluZ3Mgc2hvdWxkIGJlIHdyaXR0ZW7igJ0ga2luZCBvZiBjb2Rl
Lg0KDQpJIGFtIG5vdCBrbm93biBmb3IgYmVpbmcgdW5hYmxlIHRvIGZpbmQgdGhpbmdzIHRv
IGNyaXRpY2l6ZSwgb3IgcHJhaXNpbmcgDQplYXNpbHkuIFNvbWVob3cgd2l0aCB0aGUgc21h
bGxlc3QgYnVkZ2V0IGZvciBwYXlpbmcgdGhlbSBpbiB0aGUgDQpmaWxlc3lzdGVtIHdvcmxk
LCBJIGx1Y2tlZCBvbnRvIHRoZSBiZXN0IHByb2dyYW1taW5nIHRlYW0gaW4gdGhlIA0KZmls
ZXN5c3RlbSB3b3JsZC4gVGhlIGZpbGVzeXN0ZW0gd2FzIHdvcnRoeSBvZiB0aGVpciB0YWxl
bnRz4oCUSSB3aXNoIHRoYXQgDQpJIGFzIGEgcGVyc29uIGhhZCBiZWVuIHdvcnRoeSBvZiB0
aGVtLltwYWdlIDIwIGZvbGxvd3NdDQoNClRoZSBwcm9ibGVtIHdhcyB0aGF0IGl0IGRpZG7i
gJl0IHVzZSB0aGUgY29kZSB0aGF0IGhhZCBiZWVuIHdyaXR0ZW4gYnkgDQpvdGhlcnMgaW4g
dGhlIGtlcm5lbCBjb21tdW5pdHksIGFuZCBwZW9wbGUgZG9u4oCZdCByZWFsbHkgbGlrZSB0
aGVpciBjb2RlIA0Kbm90IGJlaW5nIHVzZWQuIFBlb3BsZSB3YW50IHRvIGZlZWwgaW5jbHVk
ZWQuIEkgcmVzcG9uZGVkIHRvIHRoZWlyIA0Kc29jaWFsIG5lZWQgYnksIHdlbGwsIHNjcmV3
aW5nIHRoZSBwb29jaCBpbiByZXNwb25zZSAoYmVuY2htYXJrcyBhbmQgDQpkaXNwdXRpbmcg
dGhlaXIgZXhwZXJ0aXNlKS4gSW1hZ2luZSBpZiBJIGhhZCByZXNwb25kZWQgYnkgc2F5aW5n
IHRoYXQgSSANCm5lZWRlZCB0aGVpciBoZWxwIGluIGltYWdpbmluZyBuZXcgZmlsZSBwbHVn
aW5zIGluc3RlYWQ/DQoNCllvdSBrbm93IGhvdyBwZW9wbGUgYXJlIG11Y2ggbW9yZSBsaWtl
bHkgdG8gcmVhZCBhbiBlbWFpbCBpZiBpdCBpcyBvbmUgDQpzY3JlZW4gbG9uZywgcmF0aGVy
IHRoYW4gdGhlIGxlbmd0aCBvZiB0aGlzIDotLyA/IEl0IGlzIHNpbWlsYXIgd2l0aCANCmNv
bnRyaWJ1dGluZyBjb2RlIHRvIHRoZSBrZXJuZWwuIEl0IGlzIG11Y2ggbW9yZSBzb2NpYWwg
YW5kIHJlbGF0aW9uc2hpcCANCmRldmVsb3BpbmcgdG8gY29udHJpYnV0ZSBhIHNjcmVlbmZ1
bCBvciB0d28gb2YgY29kZSBvbmNlIGV2ZXJ5IHdlZWsgb3IgDQp0d28gb3ZlciB0aGUgY291
cnNlIG9mIHllYXJzLiBXZSB3ZXJlIGRyb3BwaW5nIDkwLDAwMCBsaW5lcyBvZiBjb2RlIG9u
IA0KdGhlbSBhbGwgYXQgb25jZSwgaGF2aW5nIHdvcmtlZCBvbiBpdCBpbiB0b3RhbCBzb2Np
YWwgaXNvbGF0aW9uIGZvciA1IA0KeWVhcnMgaW4gTW9zY293LCBTb2NpYWxseSBpdCB3YXMg
YWxsIGJhZC4gU21hbGwgaW5jcmVtZW50cyBhcmUgdGhlIG1vcmUgDQpzb2NpYWwgd2F5IHRv
IGdvLiBJbmNyZW1lbnRhbCBpbXByb3ZlbWVudHMgdG8gVjMgd291bGQgaGF2ZSBtZXQgbm8g
DQpvcHBvc2l0aW9uLiBXZSBjb3VsZCBoYXZlIGxpdmVkIGEgbGlmZSBvZiBiZWluZyBhIGxp
dHRsZSBiaXQgYmV0dGVyIHRoYW4gDQpleHQzLCBhbmQgYmVlbiByZXNwZWN0ZWQgaW4gdGhl
IGZpZWxkIGFzIHdlIHdhaXRlZCBmb3Igc29tZW9uZSB5b3VuZyB0byANCm9ic29sZXRlIHVz
LA0KDQpBbGFzLDExIGl0IGhhZCB0byBiZSB3cml0dGVuIGZyb20gc2NyYXRjaCB0byBiZSB3
cml0dGVuIHJpZ2h0LCB0byBiZSANCndyaXR0ZW4gdGhlIGJlc3QgSSBrbmV3IGhvdyB0byB0
byBkZXNpZ24gaXQsIHRvIGZpeCB3aGF0IHRoZSBiZW5jaG1hcmtzIA0KaGFkIDEyIHJldmVh
bGVkIHRvIGFuIGVtcGlyaWNpc3QuIE15IGxlYWRlcnNoaXAgYW5kIHByb2plY3QgbWFuYWdl
bWVudCANCmZhaWx1cmVzIG5lZWRlZCB0byBiZSBhdG9uZWQgZm9yLiBUaGUgbWFpbnRhaW5h
YmlsaXR5IG9mIGEgcGx1Z2luIGJhc2VkIA0KZmlsZXN5c3RlbSB3YXMgcGVyaGFwcyBtb3Jl
IGltcG9ydGFudCB0aGFuIHRoZVtwYWdlIDIxIGZvbGxvd3NdIA0KYmVuY2htYXJrcywgSSBo
YWQgYWRkZWQgY29tbWVudHMsIGFuZCB3ZSBoYWQgYWRkZWQgYnVnIEZpeGVzLCBidXQgSSBh
bSANCnNvIGdsYWQgSSBrZXB0IG5vbmUgb2YgaXQgZm9yIFY0Lg0KDQpJZiBJIGhhZCBoYWQg
dGhlbiB0aGUgY29uZmxpY3QgcmVzb2x1dGlvbiBza2lsbHMgSSBoYXZlIGxlYXJuZWQgaW4g
DQpwcmlzb24gQ29nbml0aXZlIEJlaGF2aW9yYWwgSW50ZXJ2ZW50aW9uIGNsYXNzZXMgSSBt
aWdodCB3b3VsZCBoYXZlIGJlZW4gDQphYmxlIHRvIG92ZXJjb21lIGFsbCB0aGF0Lg0KDQpU
aGVuLCBteSBhdHRpdHVkZSB3YXMsIGl04oCZcyB0aGUgZmFzdGVzdCBmaWxlc3lzdGVtIGlu
IHRoZSB3b3JsZCwgd2h5IA0KYXJlbuKAmXQgeW91IGhhcHB5IGFuZCBoZWxwZnVsPyEgTG9v
ayBhdCB0aGVzZSBiZW5jaG1hcmtzISBUaGVzZSBwbHVnaW5zISANCldoeSBkbyBJIGhhdmUg
dG8gZGVhbCB3aXRoIHRoZXNlIHBlb3BsZSB3aG8gZGlkbuKAmXQgd3JpdGUgYXMgZmFzdCBv
ZiBhIA0KZmlsZXN5c3RlbSA/IExldCB0aGVtIHdyaXRlIHRoZWlycywgYW5kIHVzIHdyaXRl
IG91cnMgLSBWRlMgc2hvdWxkIGFsbG93IA0KdGhhdCAhIE15IGF0dGl0dWRlIHNob3VsZCBo
YXZlIGJlZW4sIGlnbm9yZSB0aGUgaG9zdGlsaXR5LCB0aGF04oCZcyB0byBiZSANCmV4cGVj
dGVkIGF0IGZpcnN0IGFuZCBvdmVyY29tZSwgSSBjYW4gb3ZlcmNvbWUgaG9zdGlsaXR5LCBh
bmQgdGhlIHdheSB0byANCmRvIHRoYXQgaXMgc2ltcGxlIDogMSkgbWFrZSBwZW9wbGUgRmVl
bCBhcHByZWNpYXRlZCBhbmQgY2FyZWQgYWJvdXQsIDIpIA0KbWFrZSBwZW9wbGUgRmVlbCBp
bmNsdWRlZCwgMykgbWFrZSBwZW9wbGUgd2FudCB0byBkbyB0aGluZ3Mgd2l0aCB0aG9zZSAN
CnBsdWdpbnMgdGhlbXNlbHZlcyBieSBhc2tpbmcgdGhlbSBmb3IgdGhlaXIgaWRlYXMgb24g
d2hhdCBwbHVnaW5zIHRoZXkgDQpjb3VsZCBpbWFnaW5lLg0KDQpOb3cgSSBLbm93IHRoYXQg
aXQgaXMgcG9zc2libGUgdG8gb3ZlcmNvbWUgc3VjaCBwcm9ibGVtcyBpZiBJIGFjdGl2ZWx5
IA0KYXBwbHkgbXkgbWluZCB0byBGaW5kaW5nIGFuIGVtb3Rpb25hbCBvciBzb2NpYWwgcGF0
aCB0byBtYWtpbmcgcGVvcGxlIA0KRmVlbCBnb29kLg0KDQpUaGUgbW9zdCBpbXBvcnRhbnQg
cGFydCBvZiB0aGF0IGlzIHRvIGJlbGlldmUgdGhhdCBJIGNhbiBkbyB0aGF0IA0Kc3VjY2Vz
c2Z1bGx5LiBJIHVzZWQgdG8gbGFjayB0aGUgYWJpbGl0eSB0byBpbWFnaW5lIHRoYXQgSSBj
b3VsZCBzdWNjZWVkIA0KYXQgb3ZlcmNvbWluZyBob3N0aWxpdHksIGJ1dCBieSBkb2luZyB0
aGUgZXhlcmNpc2VzIGluIG15IENvZ25pdGl2ZSANCkJlaGF2aW9yYWwgSW50ZXJ2ZW50aW9u
IGNsYXNzZXMgaW4gcHJpc29uIHNpdHVhdGlvbnMsIEkgaGF2ZSBzdGFydGVkIHRvIA0Kc2Vl
IHRoYXQgSSBjYW4sW3BhZ2UgMjIgZm9sbG93c10gc3RhcnRlZCB0byBiZWxpZXZlIHRoYXQg
SSBjYW4sDQoNCklmIHlvdSBiZWxpZXZlIHlvdSBjYW4gZG8gaXQsIHlvdSB1c3VhbGx5IGNh
biwgd2hlbiBpdCBjb21wcyB0byBtYWtpbmcgDQp0aGluZ3MgZ28gd2VsbCB3aXRoIG90aGVy
cywgSWYgeW91IGZvY3VzIG9uIEZpbmRpbmcgYSB3YXkgcGFzdCBhIA0KcHJvYmxlbSwgaW5z
dGVhZCBvZiBvbiB5b3VyIEZlZWxpbmdzIG9mIGhhdmluZyBiZWVuIHdyb25nZWQsIHlvdSBj
YW4gDQp1c3VhbGx5IGdldCBwYXN0IGEgcmVsYXRpb25zaGlwIGhpY2NvcC4gSWYgeW91IEZh
aWwsIHlvdeKAmXZlIGxvc3QgbGl0dGxlIA0KdG8gbm90aGluZyBpbiBtYWtpbmcgdGhlIGF0
dGVtcHQsIHNvIHdoeSBGZWFyIHRvIG1ha2UgdGhlIGF0dGVtcHQ/IA0KQ29udHJhcnkgdG8g
d2hhdCB5b3VuZyBtZW4gc28gb2Z0ZW4gRmVhciwgaWYgeW91IEZhaWwgaW4gc3VjaCBhbiBh
dHRlbXB0IA0KeW91IGRvbuKAmXQgbG9zZSBGYWNlIC0geW91IGdhaW4gcmVzcGVjdCBGcm9t
IG90aGVycyB3YXRjaGluZyB5b3UgdHJ5IC0gDQplc3BlY2lhbGx5IHRoZSBvbGRlciBvbmVz
LiBJZiB5b3UgbWFrZSBhIGhhYml0IG9mIGFsd2F5cyB0cnlpbmcsIHlvdSANCndpbGwgaW5l
dml0YWJseSBnZXQgZ29vZCBhdCBpdCwNCg0KKjEzDQoNCk9uZSBvZiBteSBkcmVhbXMgaXMg
dG8gc29tZWRheSBjb252aW5jZSB0aGUgU3RhdGUgTGVnaXNsYXR1cmUgdG8gdGVhY2ggDQp0
aGUgY3VycmljdWx1bSB0aGV5IHRlYWNoIHVzIHByaXNvbmVycywgaW4gZWxlbWVudGFyeSBz
Y2hvb2wsIHRoYXQgDQpwZW9wbGUgbGlrZSBtZSBjYW4gbGVhcm4gaXQgYmV0dGVyIHdpdGhv
dXQgaGF2aW5nIHRvIGdvIHRvIHByaXNvbiB0byANCmxlYXJuIGl0LCBJ4oCZbSB0cnkgbXkg
dG8gY29udmluY2Ugc29tZSBwZW9wbGUgdG8gcGl0Y2ggaXQgdG8gDQpsZWdpc2xhdG9yc+KA
lGlmIGFueSBvbmUgd291bGQgbGlrZSB0byBoZWxwIHdpdGggdGhhdCBwbGVhc2UgbGV0IG1l
IGtub3cuIA0KSXQgd2lsbCBoZWxwIHdpdGggbW9yZSB0aGFuIGp1c3QgYXZvaWRpbmcgcHJp
c29u4oCUaXQgd2lsbCBoZWxwIHdpdGggYWxsIA0KcmVsYXRpb25zaGlwIGNvbmZsaWN0cywg
YW5kIHdobyBkb2VzIG5vdCBoYXZlIHRob3Nl4oCmPyBUaGUgcHJpc29uIA0KcGFyZW50aW5n
IGNsYXNzIHNob3VsZCBiZSB0YXVnaHQgaW4gSGlnaCBTY2hvb2wgdG9v4oCmW3BhZ2UgMjMg
Zm9sbG93c10NCg0KQW4gZXhhbXBsZSBvZiB3aGF0IEkgY291bGQgaGF2ZSBoYW5kIGxlZCBk
aWZmZXJlbnRseSB3YXMgd2hlbiBWaXJvIA0KYW5ub3VuY2VkIHRoYXQgdGhlcmUgd2FzIGEg
cmFjZSBjb25kaXRpb24gaW4gb3VyIGNvZGUsIGJ1dCB0aGF0IGhlIHdvdWxkIA0Kbm90IHRl
bGwgdXMgd2hlcmUgaXQgd2FzIGJlY2F1c2UgaWYgd2UgY291bGQgbm90IGF1ZGl0IG91ciBj
b2RlIGZvciByYWNlIA0KY29uZGl0aW9ucyB3ZSBzaG91bGQgbm90IGJlIGFsbG93ZWQgaW50
byB0aGUga2VybmVsLCBWaXJvIHdhcyB0aGlzIGd1eSANCndob3NlIGNhcmVlciBmb2N1cyB3
YXMgbGFja2luZywgSSBkaWRu4oCZdCBrbm93IGFueSB0aGluZyBhYm91dCBhdWRpdGluZyAN
CmNvZGUgZm9yIHJhY2UgY29uZGl0aW9ucywgYW5kIGRpc2FwcG9pbnRpbmdseSBHb29nbGUg
ZGlkbuKAmXQgZ2V0IG1lIGFueSANCndoZXJlIGluIGxvb2tpbmcgZm9yIGhvdyBkb2VzIG9u
ZSBhdWRpdCBmb3IgcmFjZSBjb25kaXRpb25zLiBNeSBhdHRpdHVkZSANCmF0IHRoZSB0aW1l
IHdhcyB0aGF0IGl0IHNvdW5kZWQgbGlrZSBuZWNlc3NhcnkgYnV0IHRlZGlvdXMgd29yaywg
cmVhbGx5IA0KdGVkaW91cywgdGhhdCBob3BlZnVsbHkgdGhlIGd1eXMgd2hvIHdlcmUgZG9p
bmcgdGhlIGRlYnVnZ2luZyB3b3VsZCANCmZpZ3VyZSBvdXQgd2hpbGUgSSB0cmllZCB0byBn
ZXQgdGhlIG1vbmV5IGZvciB0aGVpciBuZXh0IHBheSBjaGVjay4gMTQgSSANCnNob3VsZCBo
YXZlIGRvbmUgbW9yZSB0aGFuIGNvbW11bmljYXRlIHRoZSBwcm9ibGVtLCBJIHNob3VsZCBo
YXZlIGFza2VkIA0K4oCcd2hhdCBpcyB0aGUgYXVkaXQgZm9yIHJhY2UgY29uZGl0aW9ucyBw
bGFuLCBhbmQgaGVscCBtZSBmaW5kIGxpdGVyYXR1cmUgDQpvbiBob3cgdG8gZG8gaXQsIGFu
ZCB0aGVuIGxldOKAmXMgZGl2aWRlIHVwIHRoZSByZWxldmFudCBjb2RlIGFuZCBkbyBpdCwg
DQphbGwgY29kZSB0byBiZSBhdWRpdGVkIGJ5IHR3byBkaWZmZXJlbnQgcGVvcGxlIi4gUmFj
ZSBjb25kaXRpb25zIGFyZSANCnZlcnkgZXhwZW5zaXZlIHRvIGRlYnVnIHdoZW4gdGhleSBh
cmUgcmFyZeKAlGF1ZGl0aW5nIHdvdWxkIGhhdmUgc2F2ZWQgDQptb25leS4gVGhpcyB3YXMg
YW4gYXJlYSB3aGVyZSB3ZSBhbGwgbmVlZGVkIHRvIGltcHJvdmUgb3VyIG1ldGhvZG9sb2d5
LiAxNQ0KDQpJIEZhaWxlZCB0byBjb21tdW5pY2F0ZSBieSBGYWlsaW5nIHRvIGFzayBpZiB0
aGlzIHdhcyBhbiBhcmVhIHdoZXJlIG15IA0KZ3V5cyBkaWRu4oCZdCBrbm93IGhvdyB0byBk
byBpdCBhbmQgd2VyZSB0b28gc2h5IHRvIHNheSBzbywgYW5kIGluIHRoaXMgDQp3ZXJlIGp1
c3QgbGlrZSBtZS5bcGFnZSAyNCBmb2xsb3dzXQ0KDQpXaGF0IEkgc2hvdWxkIGhhdmUgZG9u
ZSB3YXMgYXNrIFZpcm8gaW5zdGVhZCBvZiBHb29nbGUsIGFuZCBpbnZpdGUgaGltIA0KdG8g
Y29tZSB0byBNb3Njb3csIHN0YXkgaW4gbXkgc3BhcmUgcm9vbSwgc2FtcGxlIHRoZSB3b3Js
ZOKAmXMgd2lsZGVzdCANCm5pZ2h0bGlmZSAoTW9zY293KSwgYW5kIGdpdmUgb3VyIHRlYW0g
YSBzZW1pbmFyIG9uIGF1ZGl0aW5nIGZvciByYWNlIA0KY29uZGl0aW9ucyBhbmQgc3VwZXJ2
aXNlIHVzIGFzIHdlIGVhY2ggdG9vayBhIHBhcnQgb2YgdGhlIGNvZGUgYW5kIGRpZCANCnRo
ZSBhdWRpdCBwZXIgaGlzIGluc3RydWN0aW9ucywgV2UgaGFkIGFzIG11Y2ggbW90aXZhdGlv
biB0byBlbGltaW5hdGUgDQpyYWNlIGNvbmRpdGlvbnMsIG5vLCBtdWNoIG1vcmUgYmVjYXVz
ZSBpdCB3YXMgb3VyIGNvZGUgYW5kIGJ1c2luZXNzLCBhcyANClZpcm8sIFRoZXJlIHdhcyBu
byBnb29kIHJlYXNvbiBmb3IgdXMgdG8gbm90IGJlIGFsbGllcyBpbiB0aGlzLiBUaGVyZSAN
CndhcyBvbmx5IGEgYmFkIHJlYXNvbiBJIHdhcyByZXNwb25kaW5nIHRvIHRoZSBpbml0aWFs
IGhvc3RpbGl0eSByYXRoZXIgDQp0aGFuIHJlYWNoaW5nIHBhc3QgaXQgdG8gbWFrZSBhbiBh
bGx5IG9mIHNvbWVvbmUgd2hvIGhhZCBhIGxvdCBvZiANCnBvdGVudGlhbCB0byBiZSB2ZXJ5
IGhlbHBmdWwgdG8gdXMuIE5vdyBvZiBjb3Vyc2UgaGUgbWlnaHQgd2VsbCBoYXZlIA0KcmVm
dXNlZCB0aGUgaW52aXRhdGlvbiwgc2FpZCBoZSB3YXMgdG9vIGJ1c3ksIHRvbGQgdXMgdG8g
Z2V0IGJldHRlciBhdCANCnVzaW5nIEdvb2dsZSwgZXRjLiwgYnV0IGV2ZW4gaWYgaGUgcmVm
dXNlZCB0aGUgaW52aXRhdGlvbiBoZSB3b3VsZCANCnByb2JhYmx5IGhhdmUgZmVsdCBtb2xs
aWZpZWQgc29tZXdoYXQuIElmIGhlIHRvb2sgdXMgdXAgb24gdGhlIA0KaW52aXRhdGlvbiBh
bGwgb2YgdXMgY291bGQgaGF2ZSBtYWRlIHZhbHVhYmxlIEZyaWVuZHNoaXBzIGxpa2VseSB0
byBoYXZlIA0KYmVlbiB1c2VmdWwgZm9yIHRoZSByZXN0IG9mIG91ciBsaXZlcywgYXMgd2Ug
ZmVkIGhpbSBzaGkgW3NpY10gKNGJ0LgsIA0KUnVzc2lhbiBzb3VwLCBvbmUgb2YgdGhlIGJl
c3QgYXNwZWN0cyBvZiBSdXNzaWFuIGN1aXNpbmUgaXMgdGhlaXIgc291cHMpIA0KYW5kIHBl
bG1lbmllIChlbG1lbmksIEdlb3JnaWFuIHNwaWN5IHBvdCBzdGlja2VycyksIGFuZCB0b29r
IGhpbSB0byANCmRhbmNlIHRoZSBuaWdodCBhd2F5IHdoZW4gdGhlIHJhY2UgY29uZGl0aW9u
cyB3ZXJlIGdvbmUuDQoNCkkgY291bGQgaGF2ZSBzaW1pbGFybHkgYXBwcm9hY2hlZCBvdGhl
ciBLZXkgcGVyc29ucyBpbiB0aGUgS2VybmVsIA0KY29tbXVuaXR5IHdobyBleHByZXNzZWQg
dW5oYXBwaW5lc3MgYXQgb3VyIGNvbnRyaWJ1dGlvbiBvZmZlcmluZywgaWYgDQpvbmx5IEkg
aGFkIGhhZCB0aGVuIHRoZSBzb2NpYWwgY29uZmlkZW5jZSwgYW5kIGJlbGllZiB0aGF0IGl0
IGlzIA0KcG9zc2libGUgdG8gb3ZlcmNvbWUgaW5pdGlhbCB0b3VjaGVzIG9mIGFsaWVuYXRp
b24sIHRoYXQgSSBoYXZlIG5vdyANCmRldmVsb3BlZC5bcGFnZSAyNSBmb2xsb3dzXQ0KDQpJ
bnN0ZWFkIEkgcmVzcG9uZGVkIHRvIGhvc3RpbGl0eSB3aXRoIG15IG93biBob3N0aWxpdHku
DQoNCkluIHByaXNvbiwgb24gTUxLIGRheSwgSSBsZWFybmVkIG9mIE1MS+KAmXMgd29yZHM6
DQoNCuKAnE9ubHkgbG92ZSBjYW4gZmlnaHQgaGF0ZS7igJ0NCg0KSSBoYXZlIGNvbWUgdG8g
YXBwcmVjaWF0ZSwgYW5kIGZ1bGx5IHVuZGVyc3RhbmQgdGhvc2Ugd29yZHMsIEkgd2lzaCBJ
IA0KaGFkIHVuZGVyc3Rvb2QgdGhlbSB0aGVuLg0KDQpUaGVyZSB3ZXJlIGEgYnVuY2ggb2Yg
c3VjaCBzaXR1YXRpb25zIHRoYXQgSSBoYW5kbGVkIGluIHdheXMgdGhhdCBkaWQgDQpub3Qg
bWFrZSBwZW9wbGUgRmVlbCBhcHByZWNpYXRlZCBvciBpbmNsdWRlZCwgYW5kIEkgd2FudCB0
byB0YWtlIHRoaXMgDQpvcHBvcnR1bml0eSB0byBhcG9sb2dpemUgRm9yIHRob3NlLg0KDQpJ
IGVzcGVjaWFsbHkgd2FudCB0byBhcG9sb2dpemUgdG8gdGhlIG90aGVyIG1lbWJlcnMgb2Yg
b3VyIHRlYW0gd2hvIA0KaW52ZXN0ZWQgc28gbXVjaCBvZiB0aGVpciBsaXZlcyBpbnRvIG91
ciBkcmVhbSBvbmx5IHRvIGJlIGZhaWxlZCBieSBtZSwgDQphbmQgYnkgbXkgYWxpZW5hdGlu
ZyBvdGhlcnMgaW4gdGhlIExpbnV4IGtlcm5lbCBjb21tdW5pdHkuDQoNClRoZSBMaW51eCBr
ZXJuZWwgaXMgbm90IGFib3V0IGJlbmNobWFya3MsIGl0IGlzIGFib3V0IGEgY29tbXVuaXR5
IG9mIA0KcGVvcGxlIHdobyBlbmpveSB3b3JraW5nIHRvZ2V0aGVyIGluIHRoZSBDaHJpc3Rt
YXMgU3Bpcml0IHRvIGdpdmUgdG8gdGhlIA0KdXNlcnMgYWxsIHllYXIgbG9uZy4gTm93IHRo
YXQgSSBoYXZlIGNoYW5nZWQgd2hvIEkgYW0gSSBjYW4gYmV0dGVyIHNlZSB0aGF0Lg0KDQpJ
IGRvbuKAmXQga25vdyB3aGF0IGlzIGluIFJlaXNlciA14oCUSSBoYXZlbuKAmXQgYmVlbiB0
b2xkLCBhbmQgSSBjYW5ub3QgZ28gb24gDQp0aGUgSW50ZXJuZXQuIEVkd2FyZCBTaGlzaGtp
biBpcyBhIHZlcnkgYnJpZ2h0IG1hbiB0aG91Z2gsIGFuZCBvbmUgb2YgbXkgDQpyZWdyZXRz
IGlzIHRoYXQgSSBkaWRu4oCZdCBzcGVuZCBtb3JlIHRpbWUgd2l0aCBoaW0sIEkgYW0gY29u
ZmlkZW50IGhlIGhhcyANCmRvbmUgc29tZSB0aGluZyBuaWNlIGluIFJlaXNlciA1LiBXaG8g
a25vd3MsIG1heWJlIGhlIGhhcyBkb25lIHNvbWUgbmljZSANCnBsdWdpbnMgdGhhdCBJIHdv
dWxkIG5ldmVyIGhhdmUgaW1hZ2luZWQuIFRoZSBjb21wcmVzc2lvbiBwbHVnaW4gRWR3YXJk
IA0KY29kZWQgd2FzIHRoZSBvbmUgdGhpbmcgeWllbGRpbmcgdGhlIGJpZ2dlc3QgcGVyZm9y
bWFuY2UgYm9vc3Qgb2YgYWxsIA0KdGhlIHRoaW5ncyB3ZSBkaWQgaW4gUmVpc2VyIDQuIENo
YW5jZXMgYXJlIGhpZ2ggdGhhdCBJIHdvbuKAmXQgYmVbcGFnZSAyNiANCmZvbGxvd3NdIHJl
bGVhc2VkIGFueXRpbWUgc29vbi4gSSBlbmNvdXJhZ2UgcGVvcGxlIHRvIGFsbG93IHRob3Nl
IHdobyANCndvcmtlZCBzbyBoYXJkIHRvIGJ1aWxkIGEgYmVhdXRpZnVsIGZpbGVzeXN0ZW0g
Zm9yIHRoZSB1c2VycyB0byBlc2NhcGUgDQp0aGUgZWZmZWN0cyBvZiBteSByZXB1dGF0aW9u
LiBJIGludml0ZSB5b3UgdG8gZW1wYXRoaXplIHdpdGggd2hhdCB0aGlzIA0KaGFzIGJlZW4g
bGlrZSBmb3IgdGhlbSBmb3IgYSBtaW51dGUuDQoNCkxldCB0aGVpciBkcmVhbXMgZXNjYXBl
IGZyb20gdGhlIGhhcm0gSSBoYXZlIGRvbmUsIGlmIHRoYXQgZmVlbHMgcmlnaHQgDQp0byB5
b3UuDQoNCsKnIDQNCkNvbmNsdXNpb24NCkl3aXNoIEkgaGFkIGxlYXJuZWQgdGhlIHRoaW5n
cyBJIGhhdmUgYmVlbiBsZWFybmluZyBpbiBwcmlzb24gYWJvdXQgDQp0YWxraW5nIHRocm91
Z2ggcHJvYmxlbXMsIGFuZCBiZWxpZXZpbmcgSSBjYW4gdGFsayB0aHJvdWdoIHByb2JsZW1z
IGFuZCANCmRvaW5nIGl0LCBiZWZvcmUgSSBoYWQgbWFycmllZCBvciBqb2luZWQgdGhlIExL
TUwuIEkgaG9wZSB0aGF0IGRheSB3aGVuIA0KdGhleSB0ZWFjaCB0aGVzZSB0aGluZ3MgaW4g
RWxlbWVudGFyeSBTY2hvb2wgY29tZXMuDQoNCkkgdGhhbmsgUmljaGFyZCBTdGFsbG1hbiBm
b3IgaGlzIGluc3BpcmF0aW9uLCBzb2Z0d2FyZSwgYW5kIGdyZWF0IA0Kc2FjcmlmaWNlcywN
Cg0KSXQgaGFzIGJlZW4gYW4gaG9ub3IgdG8gYmUgb2YgZXZlbiBwYXNzaW5nIHZhbHVlIHRv
IHRoZSB1c2VycyBvZiBMaW51eC4gDQpJIHdpc2ggYWxsIG9mIHlvdSB3ZWxsLg0KDQpIYW5z
DQoxMS8yNi8yMw0KDQpQLlMuIExldHRlcnMgYXJlIHdlbGNvbWUsIFBsZWFzZSBzZW5kIHRo
ZW0gdG86DQoNCkhhbnMgUmVpc2VyDQpjaGNmIGczMTAwOA0KcC5vLiBib3ggMjEzMDQwDQpT
dG9ja3RvbiwgY2EsIDk1MjEzDQp1LnMuYS4NCg0KWW91IGNhbiBhbHNvIHNlbmQgdGV4dHMu
IG9yIHZpZGVvIGNoYXQgb3IgcGhvbmUgYWJvdXQsIGlmIHlvdSBnbyB0byANCmdldHRpbmdv
dXQuY29tLCBvciBwaG9uZSBjaGF0IGlmIHlvdSBzZW5kIGEgcGhvbmUgbnVtYmVyLCBmb3Ig
bWUgdG8gY2FsbCANCmFuZCBhY2NlcHQgdGhlIHBob25lIGNhbGwuDQo=
--------------SY2lRypFS08okjdEfDsORiKr
Content-Type: application/pgp-keys; name="OpenPGP_0xE2154DD1A1C77B8B.asc"
Content-Disposition: attachment; filename="OpenPGP_0xE2154DD1A1C77B8B.asc"
Content-Description: OpenPGP public key
Content-Transfer-Encoding: quoted-printable

-----BEGIN PGP PUBLIC KEY BLOCK-----

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
eh8=3D
=3DQDd3
-----END PGP PUBLIC KEY BLOCK-----

--------------SY2lRypFS08okjdEfDsORiKr--

--------------cOWOM18SQFLmZFMdxt2CzozQ--

--------------WVgnedWdnUlXXYfJNhYoSWbN
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature.asc"

-----BEGIN PGP SIGNATURE-----

wnsEABYIACMWIQS1rLeeEfG/f0nzK7hYUwVpYvFOWAUCZak8SAUDAAAAAAAKCRBYUwVpYvFOWMrz
AP9U3y8WOI32N+Hsiq5Z3y/Hadbk1hjfHKJgTS4FbTHLBwEArnZPHCOxK67vDhe+HvOjhjEPDWEK
y0pJALIt03Htggk=
=Ttrb
-----END PGP SIGNATURE-----

--------------WVgnedWdnUlXXYfJNhYoSWbN--


Return-Path: <linux-kernel+bounces-142771-lists+linux-kernel=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from am.mirrors.kernel.org (am.mirrors.kernel.org [147.75.80.249])
	by mail.lfdr.de (Postfix) with ESMTPS id 109908A2FED
	for <lists+linux-kernel@lfdr.de>; Fri, 12 Apr 2024 15:53:53 +0200 (CEST)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by am.mirrors.kernel.org (Postfix) with ESMTPS id C26091F21761
	for <lists+linux-kernel@lfdr.de>; Fri, 12 Apr 2024 13:53:52 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 2C8598624E;
	Fri, 12 Apr 2024 13:53:36 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b="W9a7fOds"
Received: from smtp.kernel.org (aws-us-west-2-korg-mail-1.web.codeaurora.org [10.30.226.201])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 6E6C785287
	for <linux-kernel@vger.kernel.org>; Fri, 12 Apr 2024 13:53:35 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=10.30.226.201
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1712930015; cv=none; b=qFabAFOOkaSJ4K7T1m2e+SqtHiqoJCGTXcrk0shv3JAi3wRSKF3uFjw+SlfKNQJSjOFEbmhSraVJ9Not65M3n6uXML27VffMWidOkHdSK+7I+ZuBODiH8Cgr7ImUvPG0gQLDLYMXvDdb4rhLIisv1PqRXmrdCBwjCZpsXDh1WWA=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1712930015; c=relaxed/simple;
	bh=5GhNa5rV7rEKpJFGc4DkQalPEvkcxeBWtDg5sglJ6Wg=;
	h=Date:Message-ID:From:To:Cc:Subject:In-Reply-To:References:
	 MIME-Version:Content-Type; b=XKe2sRhZqHfLkHTpEMw1UHrBuQNIYTqrSo0dYug3tuONxip2FEX9wCkxXQDSZVVzEkRxsa6WWeGGGYvJBjFn3RYVuXzg2Y5yTNXC03LIJ+7axAOR2AmPPyi6fow2zwE09cY6HAduWiix4580rUbKEgGeGttZw+18EIlHKjGNmiw=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b=W9a7fOds; arc=none smtp.client-ip=10.30.226.201
Received: by smtp.kernel.org (Postfix) with ESMTPSA id D9A5DC113CC;
	Fri, 12 Apr 2024 13:53:34 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
	s=k20201202; t=1712930014;
	bh=5GhNa5rV7rEKpJFGc4DkQalPEvkcxeBWtDg5sglJ6Wg=;
	h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
	b=W9a7fOdsyAsT9KPJSmC4jmJx/R5x73DoZAAq3r4MbDekw9YffvuNlg/3TB3/YDWOg
	 jG9iWLUttC9672FJoCSS66UZMY12TBa0X2xi58WVSqGx1wyh3mpXUsrZkqF6KhIs4B
	 hG9Lbjw2EftNLn+9N9R4wTqdFUP6WhwSOBWryoOeUmRW1pqh7pF6voYiAZOYiCujsc
	 hhr+nvhPNgPGWYJ0A6pj5emN/hAZm36uR0vzzzcHLbfAAkxlfV+4RfVDAuDCvMSzUd
	 iUpXIwCNdIFtCd0wH6YxaEq5xAEnPVHJlS5EpIFlRUSrRZjpcV/HmIUjvozk7zsJef
	 uAcuYUdbH5nWQ==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
	by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	(Exim 4.95)
	(envelope-from <maz@kernel.org>)
	id 1rvHLQ-003uFv-GW;
	Fri, 12 Apr 2024 14:53:32 +0100
Date: Fri, 12 Apr 2024 14:53:32 +0100
Message-ID: <86il0msn4z.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Dawei Li <dawei.li@shingroup.cn>
Cc: tglx@linutronix.de,
	yury.norov@gmail.com,
	akpm@linux-foundation.org,
	florian.fainelli@broadcom.com,
	chenhuacai@kernel.org,
	jiaxun.yang@flygoat.com,
	anup@brainfault.org,
	palmer@dabbelt.com,
	samuel.holland@sifive.com,
	linux@rasmusvillemoes.dk,
	linux-kernel@vger.kernel.org
Subject: Re: [PATCH 3/6] irqchip/gic-v3-its: Avoid explicit cpumask allocation on stack
In-Reply-To: <20240412105839.2896281-4-dawei.li@shingroup.cn>
References: <20240412105839.2896281-1-dawei.li@shingroup.cn>
	<20240412105839.2896281-4-dawei.li@shingroup.cn>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/29.2
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: dawei.li@shingroup.cn, tglx@linutronix.de, yury.norov@gmail.com, akpm@linux-foundation.org, florian.fainelli@broadcom.com, chenhuacai@kernel.org, jiaxun.yang@flygoat.com, anup@brainfault.org, palmer@dabbelt.com, samuel.holland@sifive.com, linux@rasmusvillemoes.dk, linux-kernel@vger.kernel.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false

On Fri, 12 Apr 2024 11:58:36 +0100,
Dawei Li <dawei.li@shingroup.cn> wrote:
> 
> In general it's preferable to avoid placing cpumasks on the stack, as
> for large values of NR_CPUS these can consume significant amounts of
> stack space and make stack overflows more likely.
>
> Remove cpumask var on stack and use proper cpumask API to address it.

Define proper. Or better, define what is "improper" about the current
usage.

>
> Signed-off-by: Dawei Li <dawei.li@shingroup.cn>
> ---
>  drivers/irqchip/irq-gic-v3-its.c | 9 ++++++---
>  1 file changed, 6 insertions(+), 3 deletions(-)
> 
> diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
> index fca888b36680..a821396c4261 100644
> --- a/drivers/irqchip/irq-gic-v3-its.c
> +++ b/drivers/irqchip/irq-gic-v3-its.c
> @@ -3826,7 +3826,7 @@ static int its_vpe_set_affinity(struct irq_data *d,
>  				bool force)
>  {
>  	struct its_vpe *vpe = irq_data_get_irq_chip_data(d);
> -	struct cpumask common, *table_mask;
> +	struct cpumask *table_mask;
>  	unsigned long flags;
>  	int from, cpu;
>  
> @@ -3850,8 +3850,11 @@ static int its_vpe_set_affinity(struct irq_data *d,
>  	 * If we are offered another CPU in the same GICv4.1 ITS
>  	 * affinity, pick this one. Otherwise, any CPU will do.
>  	 */
> -	if (table_mask && cpumask_and(&common, mask_val, table_mask))
> -		cpu = cpumask_test_cpu(from, &common) ? from : cpumask_first(&common);
> +	if (table_mask && cpumask_intersects(mask_val, table_mask)) {
> +		cpu = cpumask_test_cpu(from, mask_val) &&
> +		      cpumask_test_cpu(from, table_mask) ?
> +		      from : cpumask_first_and(mask_val, table_mask);

So we may end-up computing the AND of the two bitmaps twice (once for
cpumask_intersects(), once for cpumask_first_and()), instead of only
doing it once.

I don't expect that to be horrible, but I also note that you don't
even talk about the trade-offs you are choosing to make.

> +	}
>  	else
>  		cpu = cpumask_first(mask_val);

Please fix the coding style (if () { ... } else { ... }).

	M.

-- 
Without deviation from the norm, progress is not possible.


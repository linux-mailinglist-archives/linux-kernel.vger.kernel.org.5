Return-Path: <linux-kernel+bounces-70046-lists+linux-kernel=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from am.mirrors.kernel.org (am.mirrors.kernel.org [147.75.80.249])
	by mail.lfdr.de (Postfix) with ESMTPS id 2D5A785923D
	for <lists+linux-kernel@lfdr.de>; Sat, 17 Feb 2024 21:02:53 +0100 (CET)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by am.mirrors.kernel.org (Postfix) with ESMTPS id D79FA1F2242B
	for <lists+linux-kernel@lfdr.de>; Sat, 17 Feb 2024 20:02:52 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 2F21F7E781;
	Sat, 17 Feb 2024 20:02:32 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=posteo.net header.i=@posteo.net header.b="RwmGKLgP"
Received: from mout01.posteo.de (mout01.posteo.de [185.67.36.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 136F47E599
	for <linux-kernel@vger.kernel.org>; Sat, 17 Feb 2024 20:02:26 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.67.36.65
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1708200151; cv=none; b=CNap1hUv9oZgA3unGpch6B05yLwmIj6lfcCj4QXXP5ywOCCuWsqqRvTwlrEwza9pcxObHG+OGprdRNEGaHhjHWYLZ/Tct5RaEpfBRQ/fnIFq4MaCaQOrjhuNU0cS7MeEqdXBXojRGuSZvK2JS/TDGTS4JDG6M5gheO932F1w+2Q=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1708200151; c=relaxed/simple;
	bh=0C1CBOiQuvzSBak2fykgvRp1ayDDC7QbGItT6k4iANU=;
	h=MIME-Version:Content-Type:Date:From:To:Cc:Subject:In-Reply-To:
	 References:Message-ID; b=aKF2Dtt8BJK7qLiXvfCMQFV7N9aRgZrYPlLG3mZ6J7lfSlPpJr181VjxR6BvQPCAK0n0q7BrnicpB5BjKvO4cKAaObopXTkLlJMHJRmPg8JUwuX5tpZkEJiyZIUfT74sNE/O5KEY2GeqObP1dIOatAPendEd8Mnlu/8F0iNV0eo=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=posteo.net; spf=pass smtp.mailfrom=posteo.net; dkim=pass (2048-bit key) header.d=posteo.net header.i=@posteo.net header.b=RwmGKLgP; arc=none smtp.client-ip=185.67.36.65
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=posteo.net
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=posteo.net
Received: from submission (posteo.de [185.67.36.169]) 
	by mout01.posteo.de (Postfix) with ESMTPS id BE533240029
	for <linux-kernel@vger.kernel.org>; Sat, 17 Feb 2024 21:02:24 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=posteo.net; s=2017;
	t=1708200144; bh=0C1CBOiQuvzSBak2fykgvRp1ayDDC7QbGItT6k4iANU=;
	h=MIME-Version:Content-Type:Content-Transfer-Encoding:Date:From:To:
	 Cc:Subject:Message-ID:From;
	b=RwmGKLgPByQ82toydTLc96K7pNJjfOlubasx/UTDpuz7439Rtc7bLbB6HeTmzQ4mh
	 eHsYXL8CEO9+PAzhds5EaJFWcMqdWBXtdkhxsUci2ArSckZr7Qk7evLPll0ztfH5gK
	 Zu0gas9qlAUjtsCiBB+wOnWONWOkhoDwT0kxWI+PNyn5pu1x1EFyGaEo9stTAFFir9
	 /oe9/RDod527MfeBVB0cze5YRY2+wouIr+M8aSGdQdjjEV8Gu9LvRmoWALnJej+nCS
	 Kzj2eRgu9Oy4mkocv2T32hhfAi2x80h+JULb25QbefI8lQCd6ScY7toGXKsE5Ty2UY
	 zJWnhc4Ryrn5g==
Received: from customer (localhost [127.0.0.1])
	by submission (posteo.de) with ESMTPSA id 4Tcfpl2RSmz6txR;
	Sat, 17 Feb 2024 21:02:23 +0100 (CET)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII;
 format=flowed
Content-Transfer-Encoding: 7bit
Date: Sat, 17 Feb 2024 20:02:23 +0000
From: Yueh-Shun Li <shamrocklee@posteo.net>
To: Andrew Morton <akpm@linux-foundation.org>
Cc: Mark Brown <broonie@kernel.org>, Andy Shevchenko
 <andriy.shevchenko@linux.intel.com>, Herve Codina
 <herve.codina@bootlin.com>, Christophe Leroy <christophe.leroy@csgroup.eu>,
 linux-kernel@vger.kernel.org
Subject: Re: [PATCH v2] minmax: substitute local variables using
 =?UTF-8?Q?=5F=5FUNIQUE=5FID=28=29?=
In-Reply-To: <20240215140704.7989cc915a8f92a6358e7455@linux-foundation.org>
References: <20240215185820.2285834-1-shamrocklee@posteo.net>
 <20240215140704.7989cc915a8f92a6358e7455@linux-foundation.org>
Message-ID: <60c9477d80241b2aa363ed8ab4e3a84b@posteo.net>

On 2024-02-16 06:07, Andrew Morton wrote:
> On Thu, 15 Feb 2024 18:58:15 +0000 Yueh-Shun Li 
> <shamrocklee@posteo.net> wrote:
> 
>> Substitute identifier names of local variables used in macro
>> definitions inside minmax.h with those generated by 
>> __UNIQUE_ID(prefix)
>> to eliminate passible naming collisions.
>> 
>> Identifier names like __x, __y and __tmp are everywhere inside the
>> kernel source. This patch ensures that macros provided by minmax.h
>> will work even when identifiers of these names appear in the expanded
>> input arguments.
> 
> Makes sense I guess.  However I do wonder how far this goes:
> 
> # grep typeof include/linux/*.h | wc -l
> 313
> 
> Many of these are locals being defined within macros. Do they all need
> changing?

Regarding the extent of changes needed, you raise a valid point.
Searching in include/linux with regular expression
`typeof\([A-Za-z0-9]+\) __`, there are about 20 header files contain
macros with temporary variables prior to this patch, and 10 of them
(including minmax.h) uses generic variable names such as __a, __x, __v,
__val, __p or __ptr.

> If so, do we really want to implement this fix for what has
> always been, to my knowledge, a non-problem?

While the occurrence of collision is minimal in the current Linux kernel
source, the presence of variable names prefixed with long underscores
hints the potential issue. Although Linux kernel coding style recommends
suffixing temporary variable names per-macro to avoid collisions[1],
prefix more underscore (_) before the colliding local variable name
seems to be a workaround that receives wider adoption. Examples include
____ptr in three include/linux/*.h files and ______r, ______f in
compiler.h. commit 24ba53017e18 ("rcu: Replace ________p1 and
_________p1 with __UNIQUE_ID(rcu)") shows how __UNIQUE_ID() could be a
more systematic solution.

A probable cause of __UNIQUE_ID() not being widely adopted as
long-underscore variables is that the __COUNTER__ support was not
available until to GCC 4 and Clang 2. It was until recently that
__UNIQUE_ID() provided by compiler.h was unified to use __COUNTER__ by
commit a8306f2d4dce ("compiler.h: unify __UNIQUE_ID").

This patch aims toward minmax.h because it provides general
functionality, such as minimum, maximum and variable swapping, that are
used across subsystems. As for other headers, those with long-underscore
names and those with wide application could be changed first.

Thank you for your valuable feedback.

Best regards,

Shamrock

[1]: 
https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl


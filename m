Return-Path: <linux-kernel+bounces-30175-lists+linux-kernel=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from am.mirrors.kernel.org (am.mirrors.kernel.org [147.75.80.249])
	by mail.lfdr.de (Postfix) with ESMTPS id 11F2D831AFF
	for <lists+linux-kernel@lfdr.de>; Thu, 18 Jan 2024 15:00:28 +0100 (CET)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by am.mirrors.kernel.org (Postfix) with ESMTPS id BD1191F27FE0
	for <lists+linux-kernel@lfdr.de>; Thu, 18 Jan 2024 14:00:27 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 336F825765;
	Thu, 18 Jan 2024 14:00:21 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b="aeM1B0J2"
Received: from smtp.kernel.org (aws-us-west-2-korg-mail-1.web.codeaurora.org [10.30.226.201])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 79DAA25759
	for <linux-kernel@vger.kernel.org>; Thu, 18 Jan 2024 14:00:20 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=10.30.226.201
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1705586420; cv=none; b=imPbJCd4yaxTzMgPaHM7YTprseHz8ZwjhxJPnDPVrLiJ5MqI/wTho9kZ4xl2QroohDX9sgvf6slxKkig/AlF2aVyAk0G3mv0KOrD3KkbrtBPb7iG+xJnRuC+sXQLFmfPl0d9cFGxnJiR6x+KGGjDUeSZvsQjGsRquZ5JaPqY/rg=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1705586420; c=relaxed/simple;
	bh=oePAFFYODLX4qKuT+hCCpKcLhpD+k+lB3GJAV7/Ee3I=;
	h=Received:DKIM-Signature:Received:Date:Message-ID:From:To:Cc:
	 Subject:In-Reply-To:References:User-Agent:MIME-Version:
	 Content-Type:X-SA-Exim-Connect-IP:X-SA-Exim-Rcpt-To:
	 X-SA-Exim-Mail-From:X-SA-Exim-Scanned; b=YJKh4wT+wGg8BYCaQPKaVtnZddv+3Pj2xzOQnFOLab47OYmL4PZg6UwID9D7WzMiqwn7dwGA2nBhaytzfW1DGn1+VyjlT7uWwzt7HJxtoLv/qAPb32BY56iJLkX2WACuljbZ0Mef4O0WDL5VNyD4um7l3UTgaLnA/ZHnsgy86uE=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b=aeM1B0J2; arc=none smtp.client-ip=10.30.226.201
Received: by smtp.kernel.org (Postfix) with ESMTPSA id F1F62C433F1;
	Thu, 18 Jan 2024 14:00:19 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
	s=k20201202; t=1705586420;
	bh=oePAFFYODLX4qKuT+hCCpKcLhpD+k+lB3GJAV7/Ee3I=;
	h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
	b=aeM1B0J20cbeQQNXCaZYaGpdGrfTjZA7w/rSw+wgQTLOMuEDK6L+Ukg+Sgb3/JSJA
	 hAlpHZDyGPIdHRDRIBo6Y8L8FBJMdIG23sEdQugEWqb/NNDkMfRGbXkbWhlP0jIOsD
	 bQybv1OQBW1JI2UKxQhzqqQdV85Z+DGLOMAn90i0vgwkOvvwSY0Uz7Ak9XS2lRrB68
	 nX3ZYqnozKJSFtyeYFQPI9pgP+twQv8aYRz3ft6IS9ELPy70t8WZz/Y3Wr+xIgOkb4
	 ukG9Fe24G9lyL4NQtl2qxxbMk9QuF0E9ubeHPHIYzmXYg0/nAj4LJmaDkGriiigjBj
	 dNVpWXmcbYc5A==
Received: from sofa.misterjones.org ([185.219.108.64] helo=wait-a-minute.misterjones.org)
	by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	(Exim 4.95)
	(envelope-from <maz@kernel.org>)
	id 1rQSwL-00CiGO-Bx;
	Thu, 18 Jan 2024 14:00:17 +0000
Date: Thu, 18 Jan 2024 14:00:15 +0000
Message-ID: <871qaeyc5s.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Dawei Li <dawei.li@shingroup.cn>
Cc: tglx@linutronix.de,
	sdonthineni@nvidia.com,
	linux-arm-kernel@lists.infradead.org,
	linux-kernel@vger.kernel.org,
	set_pte_at@outlook.com
Subject: Re: [PATCH 1/4] irqchip/gic-v3: Implement read polling with dedicated API
In-Reply-To: <20240118112739.2000497-2-dawei.li@shingroup.cn>
References: <20240118112739.2000497-1-dawei.li@shingroup.cn>
	<20240118112739.2000497-2-dawei.li@shingroup.cn>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/28.2
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
Precedence: bulk
X-Mailing-List: linux-kernel@vger.kernel.org
List-Id: <linux-kernel.vger.kernel.org>
List-Subscribe: <mailto:linux-kernel+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-kernel+unsubscribe@vger.kernel.org>
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: dawei.li@shingroup.cn, tglx@linutronix.de, sdonthineni@nvidia.com, linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org, set_pte_at@outlook.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false

On Thu, 18 Jan 2024 11:27:36 +0000,
Dawei Li <dawei.li@shingroup.cn> wrote:
> 
> Kernel provide read*_poll_* API family to support looping based polling
> code pattern like below:
> while (...)
> {
> 	val = op(addr);
> 	condition = cond(val);
> 	if (condition)
> 		break;
> 
> 	/* Maybe some timeout handling stuff */
> 
> 	cpu_relax();
> 	udelay();
> }
> 
> As such, use readl_relaxed_poll_timeout_atomic() to implement atomic
> register polling logic in gic-v3.
> 
> Signed-off-by: Dawei Li <dawei.li@shingroup.cn>
> ---
>  drivers/irqchip/irq-gic-v3.c | 27 ++++++++-------------------
>  1 file changed, 8 insertions(+), 19 deletions(-)
> 
> diff --git a/drivers/irqchip/irq-gic-v3.c b/drivers/irqchip/irq-gic-v3.c
> index 98b0329b7154..b9d9375a3434 100644
> --- a/drivers/irqchip/irq-gic-v3.c
> +++ b/drivers/irqchip/irq-gic-v3.c
> @@ -19,6 +19,7 @@
>  #include <linux/percpu.h>
>  #include <linux/refcount.h>
>  #include <linux/slab.h>
> +#include <linux/iopoll.h>
>  
>  #include <linux/irqchip.h>
>  #include <linux/irqchip/arm-gic-common.h>
> @@ -251,17 +252,11 @@ static inline void __iomem *gic_dist_base(struct irq_data *d)
>  
>  static void gic_do_wait_for_rwp(void __iomem *base, u32 bit)
>  {
> -	u32 count = 1000000;	/* 1s! */
> +	u32 val;
>  
> -	while (readl_relaxed(base + GICD_CTLR) & bit) {
> -		count--;
> -		if (!count) {
> -			pr_err_ratelimited("RWP timeout, gone fishing\n");
> -			return;
> -		}
> -		cpu_relax();
> -		udelay(1);
> -	}
> +	if (readl_relaxed_poll_timeout_atomic(base + GICD_CTLR,
> +		val, !(val & bit), 1, 1000000) == -ETIMEDOUT)

If you are doing this, please use a constant such as USEC_PER_SEC for
the timeout. And fix the alignment of the second line so that the
parameters are aligned vertically.

> +		pr_err_ratelimited("RWP timeout, gone fishing\n");
>  }
>  
>  /* Wait for completion of a distributor change */
> @@ -279,7 +274,6 @@ static void gic_redist_wait_for_rwp(void)
>  static void gic_enable_redist(bool enable)
>  {
>  	void __iomem *rbase;
> -	u32 count = 1000000;	/* 1s! */
>  	u32 val;
>  
>  	if (gic_data.flags & FLAGS_WORKAROUND_GICR_WAKER_MSM8996)
> @@ -301,14 +295,9 @@ static void gic_enable_redist(bool enable)
>  			return;	/* No PM support in this redistributor */
>  	}
>  
> -	while (--count) {
> -		val = readl_relaxed(rbase + GICR_WAKER);
> -		if (enable ^ (bool)(val & GICR_WAKER_ChildrenAsleep))
> -			break;
> -		cpu_relax();
> -		udelay(1);
> -	}
> -	if (!count)
> +	if (readl_relaxed_poll_timeout_atomic(rbase + GICR_WAKER,
> +		val, enable ^ (bool)(val & GICR_WAKER_ChildrenAsleep),
> +		1, 1000000) == -ETIMEDOUT)
>  		pr_err_ratelimited("redistributor failed to %s...\n",
>  				   enable ? "wakeup" : "sleep");
>  }

Same thing here.

	M.

-- 
Without deviation from the norm, progress is not possible.

